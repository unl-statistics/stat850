---
title: "Midterm Exam Practice 2"
---


# Prime Factorization

In this problem, you will work towards building code that will decompose a number into its prime factors. 

We'll start by installing a package that helps work with prime numbers... `primes` in R, `SymPy` in Python.

## Skill: Install Packages

### R

Write code to install the `primes` package in R. Run the code. 

```{r}
#| label: install-primes-r
#| eval: false

install.packages("primes")
```

### Python

Write code to install the `SymPy` package in Python. 
If you choose to install the package via the terminal, place your code in the bash chunk; otherwise, place your code in the python chunk. 

```{bash}
#| eval: false
pip install sympy
```

```{python}
#| label: install-sympy
#| eval: false

%pip install sympy

```


### Thinking Criticially
You must complete this question regardless of the language used above.


1. Add `#| eval: false` to the first line of the code chunk (below the r or python chunk header) to stop that code from running every time the document is executed. 

2. List at least one additional way to keep the code in the quarto document but prevent it from running.

<!-- Your answer goes between these lines -->
Comment the line of code out using `#` at the front of the line.

<!-- ------------------------------------ -->




::: {.content-visible when-format="pdf"}
\clearpage
:::

## Skill: Loading packages

Load the packages you just installed in R and Python using the chunks below.

### R

```{r}
#| label: load-prime-r
library(primes)
```

### Python

Hint: SymPy should be typed as `sympy` when loading the package. You will only need the `primerange` function in SymPy. 

```{python}
#| label: load-prime-py
from sympy import primerange
# import sympy as sp
# import sympy
```

::: {.content-visible when-format="pdf"}
\clearpage
:::

## Skill: Using prewritten functions

### R

Use the `generate_primes(min, max)` function to generate all the primes between 1 and 47, inclusive.
Store these numbers in a variable called `myprimes`.

```{r}
#| label: use-prime-fn-r
myprimes <- generate_primes(1, 47)
```


### Python

Use the `primerange(a, b)` function in `SymPy` to get all primes between 1 and 47, inclusive. 
Store these numbers in a variable called `myprimes`.

You may have to convert the output of `primerange` to a `list` by wrapping the function call in `list()`. 
It may be convenient to then convert your list into a numpy array using `np.array(list(...))`.
If you choose to do this, you will also need to import the numpy library. 

```{python}
#| label: use-prime-fn-py
# import numpy as np
# myprimes = np.array(list(primerange(1, 48)))
myprimes = list(primerange(1, 48)) # without numpy
```


### Comparison

Do the function parameters you used in R and python differ? Why?

<!-- Your answer goes between these lines -->
In Python, intervals are half-open, that is, `primerange(1, 47)` would not include 47, so it is necessary to use `primerange(1, 48)` to get 47, which is prime. 
In R, intervals are closed, so `generate_primes(1, 47)` includes 47 within the acceptable interval. 
<!-- ------------------------------------ -->


::: {.content-visible when-format="pdf"}
\clearpage
:::


::: {.content-visible when-format="pdf"}
\clearpage
:::

## Skill: Indexing and Subsets

Using your `primes` variables (in both R and python), 
determine which primes are a factor of a second variable, `x`. 
You may want to test your code on values like `x=18`, `x=25`, `x = 34`, `x=43`, 
Your code should output only the prime factors of `x`. 

::: callout-note

### Reminder: Modular Division

Remember that modular division gives you the remainder when dividing a number by another number. 
`x %% 3` (R) or `x % 3` (Python) will give you the remainder when `x` is divided by 3. 

If `x` is an integer and the divisor is an integer, the result of modular division will also be an integer. 

:::


### R

```{r}
#| label: determine-prime-factors-r
x <- 43
myprimes[x%%myprimes == 0]
```


### Python

```{python}
#| label: determine-prime-factors-py
x = 18
[i for i in myprimes if x%i==0] # without numpy
# myprimes[x%myprimes == 0] # with numpy
```


::: {.content-visible when-format="pdf"}
\clearpage
:::


## Skill: Writing Functions

In the previous section, you determined which primes were factors of a given number.
Of course, it is possible to have a number which has multiple occurrences of the same prime factor.

In R and python, write a function, `prime_n(x, prime)`, which will determine how many times a single, pre-specified prime number `prime` can be evenly divided into a number `x`. 
You may want to calculate an upper bound for this possibility to help you in your search.
Your function should take parameters `x` and `prime` and return the integer number of times `prime` occurs in the prime factorization of `x`. 


::: callout-note

## Reminder: Logs with different bases

The operation $\log_a(x) = b$ is defined the number $b$ such that $a^b = x$ for fixed $a$ and $x$. 
You can use this information to determine the maximum number of times a factor could be repeated when calculating the prime factorization of a number.

You will need to load the `math` library in Python to access the `math.log(a, Base)` function. In R, the `log(x, base)` function is built in. 

It may also be useful to know that the `floor()` function (R) and `math.floor()` function (Python) will round down to the integer below a value. 

:::


### R

```{r}
#| label: prime-factor-r
prime_n <- function(x, prime) {
  max_n <- floor(log(x, base =  prime))
  prime_seq <- prime^(1:max_n)
  which.max(prime_seq[x%%prime_seq == 0])
}

prime_n(18, 3)
prime_n(32, 2)
```

A number of you handled this using a while loop -- which is a great way to do it, and doesn't require the `log` hint I gave you.


```{r}
#| label: prime-factor-r2
prime_n <- function(x, prime) {
  times <- 0
  while(x%%prime == 0) {
    x <- x/prime # Divide x by prime
    times <- times + 1 # Increase times to account for that
  }
  
  if(times == 0) {
    return(NULL)
  } else {
    return(times)
  }
}

prime_n(18, 3)
prime_n(32, 2)
```


### Python

```{python}
#| label: prime-factor-py
import math
import numpy as np
def prime_n(x, prime):
  max_n = math.floor(math.log(x, prime))
  exp_opts = np.array(range(1, max_n+1))
  prime_seq = prime**(exp_opts)
  ans = max(exp_opts[x%prime_seq == 0])
  return ans


prime_n(18, 3)
prime_n(32, 2)
```


```{python}
#| label: prime-factor-py2
import math
import numpy as np
def prime_n(x, prime):
  times=0
  while(x%prime==0):
    x=x/prime
    times = times + 1
  
  if(times != 0):
    return times
  
  return 'Not a factor'


prime_n(18, 3)
prime_n(32, 2)
```

::: {.content-visible when-format="pdf"}
\clearpage
:::

## Skill: Data Frames, Loops

Putting the pieces together, use your function and your list of prime factors to determine the prime factorization of a given number. 
Store your factorization as a data frame with two columns: factor and power, where factor contains the factor and power contains the number of times that factor appears in the prime factorization.

For instance, your result for `x=18` should be a data frame that looks like this:

factor | power
------ | ------
     2 |     1
     3 |     2


Hint: 

- R: `rbind(df, row)` will add `row` to the bottom of `df` if `df` is a data frame
- Python: `pandas.concat([df, row])` will add `row` to the bottom of `df` if `df` is a data frame.


### Planning

Using the provided scratch paper (please put your name at the top), sketch a basic program flow map that shows how the code you've already written fits together to solve this problem. 
Identify any bits of logic you need to write to solve the problem.

<!-- Identify which sheet of scratch paper your answer is on (Sheet X) here -->

My solution is sketched out on sheet ___

<!-- ---------------------------------------------------------------------- -->


### R

```{r}
#| label: combine-prime-factors-r
x = 56

factors <- myprimes[x%%myprimes==0]
my_factorization <- data.frame()
for(i in factors) {
  times <- prime_n(x, i)
  my_factorization <- rbind(my_factorization, 
                            data.frame(factor = i, power = times))
}

my_factorization
```

### Python

```{python}
#| label: combine-prime-factors-py
import pandas as pd
x = 56

factors = [i for i in myprimes if x%i==0]
my_factorization = pd.DataFrame(columns=['factor', 'power'])
for i in factors:
  times = prime_n(x, i)
  new_row = pd.DataFrame([[i, times]], columns=['factor', 'power'])
  my_factorization = pd.concat([my_factorization, new_row], ignore_index=True)

my_factorization
```

::: {.content-visible when-format="pdf"}
\clearpage
:::


## Skill: String Operations

Take the data frame you created in the previous problem and 
write a `format_factorization(df)` function that will 
output the results of that data frame as a string, 
so that the data frame containing the prime factorization 
of 18 that is shown above would return "2^1 x 3^2". 

Hint: 

- Python: in a DataFrame, you can convert the whole column to a string using `df.colname.astype("str")` (replace df, colname with appropriate data frame name and column name)

### R

```{r}
#| label: string-ops-r
format_factorization <- function(df) {
  stopifnot("factor" %in% names(df), "power" %in% names(df))
  
  paste(paste0(df$factor, "^", df$power), collapse = " x ")
}
```

### Python

```{python}
#| label: string-ops-py
def format_factorization(df):
  mystr = df.factor.astype("str") + "^" + df.power.astype("str")
  return " x ".join(mystr)

format_factorization(my_factorization)
```


::: {.content-visible when-format="pdf"}
\clearpage
:::


## Skill: Control Statements

Take the code you wrote in the previous part and use it to create a function 
`prime_factorize` that will return the prime factorization of a number. 
If the number provided is a prime, your function should return "<number> is prime" 
instead of returning that the factorization is <number>^1 (which is not as clear). 

### Planning

What modifications will you need to make to handle any number? 
e.g. what if the number is greater than 47?


<!-- Your answer goes between these lines -->

Need to list out all primes which are strictly less than the number, using the original functions in `primes` and `sympy`. 

<!-- ------------------------------------ -->



What modifications will you need to make to handle prime numbers? 

<!-- Your answer goes between these lines -->
Add an if statement detecting whether the number is prime (has no prime factors < itself) and output the prime number statement instead of the factorization. 

<!-- ------------------------------------ -->

<!-- If you want to sketch this out, please clearly indicate on your scratch paper that you're adding a solution (draw a horizontal line across the page and write Control Statements below the line) -- or use a new sheet of paper. Tell me in the section below where to find your sketch. -->

<!-- Identify which sheet of scratch paper your answer is on (Sheet X) here -->
<!-- Uncomment the line below if you used scratch paper -->
<!-- My solution is sketched out on sheet ___ -->
<!-- ---------------------------------------------------------------------- -->


How can you use previously written code and functions to accomplish this task?
<!-- Your answer goes between these lines -->

- Obtain primes using `primerange` and `generate_primes`
- Determine which primes are factors using subsetting and modular division
- If a number has no prime factors, return the prime message
- Otherwise, use `prime_n` function to determine how many times each prime is a factor
- Use this information to build a data frame
- Use the `prime_factorization` function to return the prime factorization

<!-- ------------------------------------ -->


What additional code do you need to write?
<!-- Your answer goes between these lines -->

Code to obtain a generic number of primes

If statement to test for primeness

<!-- ------------------------------------ -->

If you sketched anything for this problem out on scratch paper, please give me a page number to look at.
<!-- Identify which sheet of scratch paper your answer is on (Sheet X) here -->

My solution is sketched out on sheet ___

<!-- ---------------------------------------------------------------------- -->

### R

```{r}
#| label: prime-factorize-r
prime_factorize <- function(x) {
  stopifnot(is.numeric(x))
  # Use prewritten function, but don't get x -- 
  #   get only primes less than x
  myprimes <- generate_primes(2, x-1)
  # Check whether primes are factors
  factors <- myprimes[x%%myprimes==0]
  
  # Test whether x is prime
  if (length(factors) == 0) {
    return(paste(x, "is a prime number"))
  }
  
  # This code only runs if x is not prime
  my_factorization <- data.frame()
  for(i in factors) {
    times <- prime_n(x, i)
    my_factorization <- rbind(my_factorization,
                              data.frame(factor = i, 
                                         power = times))
  }
  
  # Return the formatted factorization
  return(format_factorization(my_factorization))
}
```

```{r}
#| label: test-prime-factors-r
prime_factorize(34253)
prime_factorize(prod(2:10))
```


### Python

```{python}
#| label: prime-factorize-py
def prime_factorize(x):
  
  myprimes = list(primerange(2, x))
  factors = [i for i in myprimes if x%i==0]
  
  if len(factors) == 0:
    return str(x) + " is prime"
  
  my_factorization = pd.DataFrame(columns=['factor', 'power'])
  for i in factors:
    times = prime_n(x, i)
    new_row = pd.DataFrame([[i, times]], columns=['factor', 'power'])
    my_factorization = pd.concat([my_factorization, new_row], ignore_index=True)

  return format_factorization(my_factorization)


```

```{python}
#| label: test-prime-factors-py
prime_factorize(34253) # should output "34253 is a prime number"
prime_factorize(3628800) # should output "2^8 x 3^4 x 5^2 x 7^1"
```

::: {.content-visible when-format="pdf"}
\clearpage
:::

## Skill: User-proofing your function

It is never safe to assume that your user knows what they are doing. 
Can you make your function from the previous part more robust by testing the user input to ensure that it conforms to your expectations?


### Planning

What assumptions does your previous answer make about parameters? 
<!-- Your answer goes between these lines -->
Numeric x
Single value x
<!-- ------------------------------------ -->

What do you need to test to ensure those assumptions are met?
<!-- Your answer goes between these lines -->
test type of x and length of x
if type is wrong, stop
if length is >1 then work with only 1st entry in x
<!-- ------------------------------------ -->



### R

```{r}
#| label: prime-factorize-checks-r
prime_factorize <- function(x) {
  stopifnot(is.numeric(x))
  if(length(x) > 1) {
    warning("x should be a single value. Using only the first entry in x")
    x <- x[1]
  }
  
  # Use prewritten function, but don't get x -- 
  #   get only primes less than x
  myprimes <- generate_primes(2, x-1)
  # Check whether primes are factors
  factors <- myprimes[x%%myprimes==0]
  
  # Test whether x is prime
  if (length(factors) == 0) {
    return(paste(x, "is a prime number"))
  }
  
  # This code only runs if x is not prime
  my_factorization <- data.frame()
  for(i in factors) {
    times <- prime_n(x, i)
    my_factorization <- rbind(my_factorization,
                              data.frame(factor = i, 
                                         power = times))
  }
  
  # Return the formatted factorization
  return(format_factorization(my_factorization))
}

```

```{r}
#| error: !expr T
prime_factorize("string")
prime_factorize(2:5)
```



### Python

```{python}
#| label: prime-factorize-checks-py
def prime_factorize(x):
  try:
    x = int(x) # convert to integer
  except ValueError as e:
    print(f"Error: {e}. x must be coercible to an integer")
  except TypeError as e:
    print(f"Error: {e}")
  else:  
    myprimes = list(primerange(2, x))
    factors = [i for i in myprimes if x%i==0]
    
    if len(factors) == 0:
      return str(x) + " is prime"
    
    my_factorization = pd.DataFrame(columns=['factor', 'power'])
    for i in factors:
      times = prime_n(x, i)
      new_row = pd.DataFrame([[i, times]], columns=['factor', 'power'])
      my_factorization = pd.concat([my_factorization, new_row], ignore_index=True)
  
    return format_factorization(my_factorization)
```

```{python}
#| error: !expr T
prime_factorize("string")
prime_factorize([2, 3, 4, 5])
```

::: {.content-visible when-format="pdf"}
\clearpage
:::


[
  {
    "objectID": "project/report.html",
    "href": "project/report.html",
    "title": "Sample Report",
    "section": "",
    "text": "# This code chunk contains code to install all of the dependencies\n# necessary to compile and run your report, using if-statements to\n# reduce install time for unnecessary code.\n# It should be set to eval = F by default, so you aren't installing\n# software on someone's computer without their consent.\n\n# This works for packages that are on CRAN\nif (!\"dplyr\" %in% installed.packages()) {\n  install.packages(\"dplyr\")\n}\nif (!\"remotes\" %in% installed.packages()) {\n  install.packages(\"remotes\")\n}\n\n# This is how to do it for a package that's only on github\nif (!\"emo\" %in% installed.packages()) {\n  remotes::install_github(\"hadley/emo\")"
  },
  {
    "objectID": "project/report.html#introduction",
    "href": "project/report.html#introduction",
    "title": "Sample Report",
    "section": "Introduction",
    "text": "Introduction\nIntroduce your dataset and basic questions for exploration. Explain any unique approaches you will take or any interesting features of your dataset that you have to overcome. Cite the source of your dataset, and briefly discuss how it was collected.\nDiscuss the variables in the dataset and if there are anomalies in the variables, provide some visual assessment of the anomalies and explain how they may have arisen. You should cover most of the information in your proposal data section, but should primarily use paragraphs and not lists/tables (the exception may be a list of e.g. items which were measured)."
  },
  {
    "objectID": "project/report.html#methods",
    "href": "project/report.html#methods",
    "title": "Sample Report",
    "section": "Methods",
    "text": "Methods\nDescribe any data cleaning and rearranging you needed to do to get your dataset into a workable form. Make sure to cite any packages which were important in your data cleaning process in this section. For instance, if you used dplyr, then it would be appropriate to say something like\n\nwe used the group-apply-combine paradigm with the dplyr functions group_by and summarize [@dplyr-package] to generate a dataset for each day of the observation period from the 15-minute interval observations in the raw data set."
  },
  {
    "objectID": "project/report.html#topic-of-exploration",
    "href": "project/report.html#topic-of-exploration",
    "title": "Sample Report",
    "section": "Topic of Exploration",
    "text": "Topic of Exploration\nHere, you want to introduce the first topic you want to explore with your (newly cleaned up) data. Code to process data should be contained in chunks above this point, and those chunks should not be included in the report.\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).\nIf you generate a figure, it should have a caption. Here’s a demonstration of how to do that:\n\n\n\n\n\n\n\n\nFigure 1: This figure shows the relationship between sepal width and petal width in irises. I’ve used geom_jitter to combat overplotting, as the data are measured in relatively consistent increments. The figure is drawn with ggplot2 [@ggplot2-package].\n\n\n\n\n\nThen, you can reference Figure 1 in the text and the appropriate cross-reference will be generated.\nYou can find additional information about formatting figures generated from code in the quarto documentation."
  },
  {
    "objectID": "project/report.html#additional-exploration-topic",
    "href": "project/report.html#additional-exploration-topic",
    "title": "Sample Report",
    "section": "Additional Exploration topic",
    "text": "Additional Exploration topic\nAdd another topic here… as many as you desire, really. Make sure to include a transition between the two sections that connects the two with some sort of logical train of thought."
  },
  {
    "objectID": "project/report.html#conclusion",
    "href": "project/report.html#conclusion",
    "title": "Sample Report",
    "section": "Conclusion",
    "text": "Conclusion\nHere, you want to summarize the main points of what you’ve learned from this investigation, in paragraph form."
  },
  {
    "objectID": "project/report.html#tips",
    "href": "project/report.html#tips",
    "title": "Sample Report",
    "section": "Tips",
    "text": "Tips\n(delete this section from your report!)\nAlmost anything you might want to know about how to format output in quarto can be found here. Feel free to email/come to office hours to figure out how to do XYZ - part of the goal of making you write this report is that I want you to know how to write e.g. a journal paper in Quarto as well, so now’s the time to experiment.\nIf you want to know what the wordcount of your report is, you can run the following command in your terminal:\npandoc --lua-filter wordcount.lua report.qmd\nNotice that I have not pushed _output/report.html or the _output/report_files/ folder to github - this is intentional. I have actually set _output to not show up in git, to encourage you all to NOT push the rendered files to github and to instead work from the markdown files directly.\nYou may find it cleaner to create a figure subdirectory and store any figures that aren’t created by R/Python in that folder. I encourage you to organize this repository in a sensible way."
  },
  {
    "objectID": "project/guidelines.html",
    "href": "project/guidelines.html",
    "title": "Project Guidelines",
    "section": "",
    "text": "Your final project consists of a written report and a presentation (uploaded to YouTube), to be turned in instead of a final exam. In this project, you will select a topic, acquire data from one or more sources, and present any interesting findings you might come across as you explore your data."
  },
  {
    "objectID": "project/guidelines.html#general-rules",
    "href": "project/guidelines.html#general-rules",
    "title": "Project Guidelines",
    "section": "General rules",
    "text": "General rules\n\nYou may work in teams of up to 3 people, but each member of the team should contribute approximately evenly (I will measure this using your git contributions)\nYour work should be reproducible from start to finish. Do not modify the data by hand! I should be able to take the original data and your repository and go through your analysis from start to finish on my own machine.\nYou should not have to do any complicated statistical modeling for this project. If you want to fit a model, you need to be able to explain it to the rest of the class - but other members of the class may have had different statistics classes than you’ve had. In general, this project should focus on exploratory data analysis; any model results should be explained using graphs, not statistical tests.\nYour project should use what you have learned (and what you will learn) about data visualization, data wrangling, programming, functions, interactive graphics, and dynamic documents. Your ultimate goal is to demonstrate the class objectives and your ability to conduct reproducible analyses and produce professional products using markdown and R/Python code."
  },
  {
    "objectID": "project/guidelines.html#datasets",
    "href": "project/guidelines.html#datasets",
    "title": "Project Guidelines",
    "section": "Datasets",
    "text": "Datasets\nYour dataset(s)\n\nshould be fun and interesting to you.\nPast classes have worked on data covering witch trials, Super Mario competitive times, personal music databases, and many other topics. You can choose something serious, or something decidedly not serious and be successful with the analysis. The best predictor of success is that the data you’re working with is something you find interesting and want to explore.\nshould be on a topic of general interest - something you could discuss with your parents or grandparents\nIf you use a technical dataset, you need to write your report with the more general audience in mind, which means you will need to explain any jargon you use, and provide diagrams of e.g. plant anatomy, etc. to get the reader up to speed. If you work with sports data, you should provide an explanation like this as well, because I (Susan) have no background knowledge about sports at all and I (Heike) will call everything ‘Fussball’, because that’s really the only sport that matters :).\nmust have at least 1000 records (rows) and at least 5 variables\nmust include at least one meaningful categorical variable and one meaningful numeric variable (these can be derived, if you are e.g. working with text or image data)\nmust not be published in a textbook or have a published analysis unless\n\nyou get prior permission and\nyour analysis is very different from what has previously been published\n\nmust be something that you can make available to the entire class (so e.g. proprietary datasets from work or other sources aren’t acceptable)\nmust be traceable to the original source of the data. You MAY NOT use data uploaded to Kaggle - go back to the data source. If you need help assembling your data, come talk to me about it and I may be able to help.\n\nHere are some potential sources of interesting and/or fun data that explain how the data was acquired/sourced and (usually) have adequate data documentation:\n\nData is Plural archive\nTidyTuesday Archive\nData.gov The US government data archive"
  },
  {
    "objectID": "project/guidelines.html#version-control",
    "href": "project/guidelines.html#version-control",
    "title": "Project Guidelines",
    "section": "Version Control",
    "text": "Version Control\nYou should use GitHub to track your project throughout its life cycle. Some tips:\n\nPull before you start working, and after each commit.\nWorking in teams on github means that you have to allow for merge conflicts and become skilled at resolving them. This is part of my goal for making you work in groups - forcing you to develop these skills. See https://www.youtube.com/watch?v=97m0N4zIvOs for a demonstration of how to work with merge conflicts in rstudio.\nI do not expect you to work on branches for this project, unless you really want to - with 3 people and a defined scope, you should be able to work out of the main branch with few problems.\nCommit your changes in small, task-oriented batches. Try to work on small tasks and commit as soon as you finish the task. This will reduce merge conflicts.\nMinimize merge conflicts:\nPut each sentence on a different line in your document - this makes it much easier for git to resolve the changes, as git works line-by-line. I make all of my graduate students do this with their papers, and it makes things much easier to work around.\nREAD THE ERROR MESSAGE FROM GIT.\nSeriously, this will help you figure out about 90% of the things that go wrong. Git actually has good error messages that help you know what to do next.\nOnly commit the essential files necessary to compile your project report to github. This will reduce merge conflicts and save you a ton of time in the long run.\n\nStick to original files only - i.e. don’t commit pictures generated by R/python, .tex files generated as an intermediate stage, or even html/pdf files that are the final product until the very end. I have set this repository up in such a way that each of the quarto files renders to the _output folder, and git ignores everything in this folder, in the hopes that this will be enough to help you out.\nDo commit any R/python source files you need to e.g. define a shiny application or do some data processing. Organize these in a code folder, and create a header in each code file that describes what the file does and how it relates to other code files in the project.\nDon’t commit any files you didn’t personally create. Be selective in what you add to git. Use the .gitignore file to keep git from tracking files that shouldn’t be added to the repository.\n\n\nI will track your contributions to the project using the python git-fame package, which you can install with the command pip install git-fame.\nI will typically use some variant of the following command to track your group contributions:\ngit fame . --incl=\".(q|R)md\"\nThis only counts modifications to the markdown files, which ensures that whoever adds a dataset to the repository doesn’t get credit for doing a ton of work by just uploading a file. This also ensures that people committing intermediate files don’t get credit for making the repository a mess."
  },
  {
    "objectID": "project/guidelines.html#project-report",
    "href": "project/guidelines.html#project-report",
    "title": "Project Guidelines",
    "section": "Project Report",
    "text": "Project Report\nYour project report should:\n\nbe contained in report.qmd. Saving your report in a different file will result in a 10 point deduction.\nuse the report.qmd template file provided in the project repository to assemble your report. It contains demonstrations of all of the requirements above. If you don’t want to overwrite this, save the template as report-template.qmd for reference and then edit report.qmd.\ninclude a separate requirements.txt file where you list out the R and python packages required to compile your report and slides.\nbe approximately \\(450\\times(2n + 1)\\) words, where \\(n\\) is the number of people in your group. The extra length is to allow you space to describe your dataset, methods, and conclusions; everyone will need to do that regardless of group size.\nIf you want to know what the wordcount of your report is, you can run the following command in your terminal (in the project directory, assuming you’ve cloned it from github classroom):\n\npandoc --lua-filter wordcount.lua report.qmd\n\nbe grammatically correct. Please feel free to make use of the writing center for editing, so that your report has appropriate grammar and structure.\ncontain an introduction and a conclusion, written in paragraphs. The “meat” of the report should tell a story. This means your report should be written and formatted as a paper - think about writing a journal article describing your data analysis and results. This means your writeup should contain paragraphs, and each figure should be cross-referenced within the text.\nbe factually correct, and should reference outside sources appropriately (see below) using quarto references.\nhave a references section, using markdown’s references functionality. You should not manually create your bibliography - it should be created automatically using a bib file.\nreference the software packages you’ve used in your analysis/report and cite them appropriately. Software is a scholarly work, and deserves to be cited. The citation() R command can help you assemble appropriate references for software packages.\nuse figures. Figures must have appropriate captions, and each figure should be referenced within the body of the paper using markdown reference syntax."
  },
  {
    "objectID": "project/guidelines.html#presentation",
    "href": "project/guidelines.html#presentation",
    "title": "Project Guidelines",
    "section": "Presentation",
    "text": "Presentation\nYour project presentation should:\n\ninclude a visual aid (slides or a poster) that highlight(s) the findings you have presented in your report. The visual aid must be created using LaTeX or markdown.\ninclude participation from each member of your group\nbe approximately \\(4\\times(n+1)\\) minutes long.\nbe uploaded to YouTube (you can set the link such that people with the link can view the presentation but where it is not searchable) or YuJa (but YouTube is easier for your classmates to work with). You will submit the link to the presentation on Canvas.\n\nYou will be expected to peer-evaluate two other groups presentations and/or reports, using the rubric."
  },
  {
    "objectID": "homework/11c.html",
    "href": "homework/11c.html",
    "title": "Homework 11: Simulation (Probability)",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/11c.html#before-you-start",
    "href": "homework/11c.html#before-you-start",
    "title": "Homework 11: Simulation (Probability)",
    "section": "Before you start:",
    "text": "Before you start:\nGo to _quarto.yml and fill in your name. This will ensure that all documents in this project have your name on them."
  },
  {
    "objectID": "homework/11c.html#rules-for-this-assignment",
    "href": "homework/11c.html#rules-for-this-assignment",
    "title": "Homework 11: Simulation (Probability)",
    "section": "Rules for this assignment:",
    "text": "Rules for this assignment:\n\nYou must write your own code for this assignment. You may work with other students and discuss the problem and how to solve it, but your code must be written individually.\nYou may use generative AI on this assignment, but any prompt/script must be saved and turned in with the assignment. You must also be able to explain every line of code you submit, whether or not you used AI to write it."
  },
  {
    "objectID": "homework/11c.html#assignment-process",
    "href": "homework/11c.html#assignment-process",
    "title": "Homework 11: Simulation (Probability)",
    "section": "Assignment Process",
    "text": "Assignment Process\nYou will have 3 weeks to complete the steps of this assignment.\n\npseudocode.qmd - you will design pseudocode to play and summarize one or more games of craps, with some help from generative AI.\ncraps-code.qmd - you will write code (using any language taught in this class) to implement the simulated game of craps using the pseudocode created in the first week.\nsimulation.qmd - you will write code to answer a complex probability question using your craps code from week 2.\n\nI will grade pseudocode.qmd after the first week, craps-code.qmd after the second week, and simulation.qmd after the end of third week. Your assignment will be graded on the progress in your github repository at the end of each week, so please make sure you push your code after each significant modification."
  },
  {
    "objectID": "homework/11c.html#grading-schema",
    "href": "homework/11c.html#grading-schema",
    "title": "Homework 11: Simulation (Probability)",
    "section": "Grading Schema",
    "text": "Grading Schema\n\nThe pseudocode for this assignment is worth one homework grade.\nThe code for the game of craps is worth a second homework grade.\nThe simulation results using the code in the previous assignment is worth a 3rd homework grade.\n\n\nPseudocode rubric\n\n\nCode rubric\n\n\nSimulation rubric"
  },
  {
    "objectID": "homework/11.html",
    "href": "homework/11.html",
    "title": "Homework 11: Simulation (Pseudocode)",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/11.html#before-you-start",
    "href": "homework/11.html#before-you-start",
    "title": "Homework 11: Simulation (Pseudocode)",
    "section": "Before you start:",
    "text": "Before you start:\nGo to _quarto.yml and fill in your name. This will ensure that all documents in this project have your name on them."
  },
  {
    "objectID": "homework/11.html#rules-for-this-assignment",
    "href": "homework/11.html#rules-for-this-assignment",
    "title": "Homework 11: Simulation (Pseudocode)",
    "section": "Rules for this assignment:",
    "text": "Rules for this assignment:\n\nYou must write your own code for this assignment. You may work with other students and discuss the problem and how to solve it, but your code must be written individually.\nYou may use generative AI on this assignment, but any prompt/script must be saved and turned in with the assignment. You must also be able to explain every line of code you submit, whether or not you used AI to write it."
  },
  {
    "objectID": "homework/11.html#assignment-process",
    "href": "homework/11.html#assignment-process",
    "title": "Homework 11: Simulation (Pseudocode)",
    "section": "Assignment Process",
    "text": "Assignment Process\nYou will have 3 weeks to complete the steps of this assignment.\n\npseudocode.qmd - you will design pseudocode to play and summarize one or more games of craps, with some help from generative AI.\ncraps-code.qmd - you will write code (using any language taught in this class) to implement the simulated game of craps using the pseudocode created in the first week.\nsimulation.qmd - you will write code to answer a complex probability question using your craps code from week 2.\n\nI will grade pseudocode.qmd after the first week, craps-code.qmd after the second week, and simulation.qmd after the end of third week. Your assignment will be graded on the progress in your github repository at the end of each week, so please make sure you push your code after each significant modification."
  },
  {
    "objectID": "homework/11.html#grading-schema",
    "href": "homework/11.html#grading-schema",
    "title": "Homework 11: Simulation (Pseudocode)",
    "section": "Grading Schema",
    "text": "Grading Schema\n\nThe pseudocode for this assignment is worth one homework grade.\nThe code for the game of craps is worth a second homework grade.\nThe simulation results using the code in the previous assignment is worth a 3rd homework grade.\n\n\nPseudocode rubric\n\n\nCode rubric\n\n\nSimulation rubric"
  },
  {
    "objectID": "homework/08.html",
    "href": "homework/08.html",
    "title": "Homework: Awesomely Bad Graphics",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/08.html#take-everything-you-know-and-use-it-for-evil",
    "href": "homework/08.html#take-everything-you-know-and-use-it-for-evil",
    "title": "Homework: Awesomely Bad Graphics",
    "section": "Take everything you know, and use it for evil",
    "text": "Take everything you know, and use it for evil\nThe textbook spent lots of time showing you how to create different types of graphics, but I spent a lot less time showing you all of the different ways you could customize graphics ggplot2 or plotnine. In this problem, I want you to create the ugliest version of the following graphs you can, and then explain why, exactly, you made the decisions you did, and which principles of good graphics you’ve intentionally violated.\nUgliness is subjective, so the goal here is for you to explore the different ways you can customize the finer details of graphics. Make sure your finished masterpiece has appropriate axis labels and a title (after all, even ugly plots need to be correctly labeled!). You are free to add additional variables and layers, modify the aesthetics used, and leverage other packages. I have provided this code as a starting point, not as a way to limit your creativity.\nI have provided some basic code to get you started. We’ll use the palmerpenguins package, which has fantastic documentation with really awesome artwork.\n\nif (!\"palmerpenguins\" %in% installed.packages()) {\n  remotes::install_github(\"allisonhorst/palmerpenguins\")\n}\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\npenguins = r.penguins\n\n\nUseful References\n\nCustomizing ggplot2 graphics\nA group-created slideshow of awful graphics\nAn example of customizing plots in plotnine"
  },
  {
    "objectID": "homework/06.html",
    "href": "homework/06.html",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/06.html#content-warning",
    "href": "homework/06.html#content-warning",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Content Warning",
    "text": "Content Warning\nThese poems may address adult topics and/or use strong or vulgar language, as they are taken from Reddit. I have not censored them in any way because I want you to work with data that is realistic. You should find a few test cases which you are comfortable with to use to test out your code, but you do not need to read all of the poems (and in both cases, I’ve provided you with approximately 1000 samples, so it’s probably too much to read in any case).\nHere are 5 indices (counting from 1) which are approximately G or PG in content for each poet, using the most recent snapshot CSV (20230806):\n\nSprog poems: 1, 2, 3, 6, 7\nSchnoodleDoodleDo poems: 1, 2, 3, 4, 5\n\nThese should be sufficient for you to test your code even if you are worried about being exposed to adult themes or language during this activity."
  },
  {
    "objectID": "homework/06.html#splitting-poems-into-lines",
    "href": "homework/06.html#splitting-poems-into-lines",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Splitting Poems into Lines",
    "text": "Splitting Poems into Lines\nSplit the poem into lines and create a data frame that has\n\na new column called poem_id, numbered from one to the total number of poems by the poet in question\na new variable called line that contains the text of each line of the poem (one row per poem line). To get this, you may need to split the comment string by the endline character (\\n) and then unnest or expand your data frame.\na new variable called line_no that contains the line number of the poem. This should be computed per poem.\n\nEnsure that you are splitting lines by a string which makes sense. Some poems have multiple paragraphs (stanzas) and may have a blank line in between; you want to preserve this blank line as it will help you make sense of the poem. Some poems instead have blank lines between every line of the poem; in these cases, you may want to split by e.g. \\n\\n instead of \\n.\nSee Part 1 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/06.html#summarizing-poems",
    "href": "homework/06.html#summarizing-poems",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Summarizing Poems",
    "text": "Summarizing Poems\nFor each poem, create a summary data frame that contains:\n\nAverage number of words per line in the poem\nNumber of lines in the poem\nNumber of characters which are not letters or spaces (punctuation, numbers, and any non-ASCII characters)\nNumber of uppercase letters in the poem\nNumber of lowercase letters in the poem\n\nCreate a plot showing the distribution of the number of words per line across all poems you have in your dataset. Create another plot showing the number of lines in the poem for all poems in your dataset. What does this tell you about the “average” style of the poet in question?\nSee Part 2 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/06.html#poetry-analysis",
    "href": "homework/06.html#poetry-analysis",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Poetry Analysis",
    "text": "Poetry Analysis\nChoose some characteristic(s) of the poet’s style to explore graphically. If necessary, create a subset of the data with poems relevant to your question before you generate numerical summaries. You may want to clean up the data and remove lines which contain quotes (e.g. start with a &gt; character) or horizontal lines in reddit markdown (e.g. only have ----).\nSome ideas to get you started thinking:\n\nNumber of syllables per line may be used to infer rhyming scheme and/or poetry style. You can use the qdap package in R, which contains the syllable_sum function to count the number of syllables in a sentence. You may need to use a for-loop or program a custom function to use the syllables function on every entry in your data frame column.\nUse of non-alphabetic characters. Schnoodle often uses emoji and other text annotations to convey emotions and excitement - how often do these types of annotations appear in their poems?\nCommon characters and phrases. Sprog writes poems frequently about a character named Timmy (who often meets a horrible end). Do these poems have a common format/style/rhyme scheme?\nSprog often writes longer poems with multiple stanzas. Identify which poems have multiple stanzas (Hint, look for blank lines in a systematic pattern) and show the distribution of stanza length, stanza variation within poems, and number of stanzas in each poem.\nSchnoodle often misspells words intentionally (using e.g. fren instead of friend) to convey that they are writing using an animal’s voice. What proportion of words are misspelled in each poem? How much does this proportion vary? Based on the distribution, how likely is it, in your opinion, that Schnoodle misspells words more often when speaking as one type of animal than another? You can use the hunspell package in R to detect whether words are likely misspelled."
  },
  {
    "objectID": "homework/06.html#splitting-poems-into-lines-1",
    "href": "homework/06.html#splitting-poems-into-lines-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Splitting Poems into Lines",
    "text": "Splitting Poems into Lines\nSplit the poem into lines and create a data frame that has\n\na new column called poem_id, numbered from one to the total number of poems by the poet in question\na new variable called line that contains the text of each line of the poem (one row per poem line). To get this, you may need to split the comment string by the endline character (\\n) and then unnest or expand your data frame.\na new variable called line_no that contains the line number of the poem. This should be computed per poem.\n\nEnsure that you are splitting lines by a string which makes sense. Some poems have multiple paragraphs (stanzas) and may have a blank line in between; you want to preserve this blank line as it will help you make sense of the poem. Some poems instead have blank lines between every line of the poem; in these cases, you may want to split by e.g. \\n\\n instead of \\n. See Part 1 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/06.html#summarizing-poems-1",
    "href": "homework/06.html#summarizing-poems-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Summarizing Poems",
    "text": "Summarizing Poems\nFor each poem, create a summary data frame that contains:\n\nAverage number of words per line in the poem\nNumber of lines in the poem\nNumber of characters which are not letters or spaces (punctuation, numbers, and any non-ASCII characters)\nNumber of uppercase letters in the poem\nNumber of lowercase letters in the poem\n\nCreate a plot showing the distribution of the number of words per line across all poems you have in your dataset. Create another plot showing the number of lines in the poem for all poems in your dataset. What does this tell you about the “average” style of the poet in question?"
  },
  {
    "objectID": "homework/06.html#poetry-analysis-1",
    "href": "homework/06.html#poetry-analysis-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Poetry Analysis",
    "text": "Poetry Analysis\nChoose some characteristic(s) of the poet’s style to explore graphically. If necessary, create a subset of the data with poems relevant to your question before you generate numerical summaries. You may want to clean up the data and remove lines which contain quotes (e.g. start with a &gt; character) or horizontal lines in reddit markdown (e.g. only have ----).\nSome ideas to get you started thinking:\n\nNumber of syllables per line may be used to infer rhyming scheme and/or poetry style. You can use the syllables python package. You may need to use a for-loop or program a custom function to use the syllables function on every entry in your data frame column.\nUse of non-alphabetic characters. Schnoodle often uses emoji and other text annotations to convey emotions and excitement - how often do these types of annotations appear in their poems?\nCommon characters and phrases. Sprog writes poems frequently about a character named Timmy (who often meets a horrible end). Do these poems have a common format/style/rhyme scheme?\nSprog often writes longer poems with multiple stanzas. Identify which poems have multiple stanzas (Hint, look for blank lines in a systematic pattern) and show the distribution of stanza length, stanza variation within poems, and number of stanzas in each poem.\nSchnoodle often misspells words intentionally (using e.g. fren instead of friend) to convey that they are writing using an animal’s voice. What proportion of words are misspelled in each poem? How much does this proportion vary? Based on the distribution, how likely is it, in your opinion, that Schnoodle misspells words more often when speaking as one type of animal than another? You can use one of the python packages discussed in this post to detect whether words are likely misspelled."
  },
  {
    "objectID": "homework/04.html",
    "href": "homework/04.html",
    "title": "Homework: Data Programming",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions:"
  },
  {
    "objectID": "homework/04.html#r",
    "href": "homework/04.html#r",
    "title": "Homework: Data Programming",
    "section": "R",
    "text": "R\n\nmonth.name is a built-in vector containing month names that you can use to create a factor variable. Factor variables can be easily converted into numeric variables. This might help you get a numeric month, which might help you get to a fractional year.\nsubset() is a function that will subset a data frame based on a logical condition. It might be easier to use than logical indexing (though you can use either). You can also use the filter function in the dplyr package.\nTo get a line graph in ggplot2, use geom_line(). Using aes(color = varname) will color the lines by variable name.\nSome sample code to make a line graph in ggplot is provided below:\n\n\nlibrary(dplyr)\n# Get only January months so that there's one point a year\njan_data &lt;- subset(games, month == \"January\")\n\n# x axis is year, y axis is average players\n# group = gamename says draw one line for each game\nggplot(data = jan_data, \n       aes(x = year, y = avg, group = gamename)) + \n  geom_line()"
  },
  {
    "objectID": "homework/04.html#python",
    "href": "homework/04.html#python",
    "title": "Homework: Data Programming",
    "section": "Python",
    "text": "Python\n\nThe time module contains the strptime function, which may help you to get from month name to month number.\nPandas will let you sort a data frame in decreasing order of variable x using sort_values('x', ascending = False)\nYou can select rows of a python data frame that match a list using .isin() demo. Alternately, Pandas data frames have a method df.query() that allows you to pass a logical condition and select rows based on that. This may be easier to use than logical indexing (though you can use either).\nUsing the .assign() function to create new variables will reduce the number of errors you run into.\nTo get a line graph in plotnine, which is a clone of ggplot2 for python, use geom_line(). Using aes(color = 'varname') will color the lines by variable name. Some sample code to make a line graph in ggplot is provided below:\n\n\n# Get only January months so that there's one point a year\njan_data = games.query('month == \"January\"')\n\n# x axis is year, y axis is average players\n# group = gamename says draw one line for each game\n(\n  ggplot(jan_data, \n       aes(x = 'year', y = 'avg', group = 'gamename')) + \n  geom_line()\n)\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "homework/02.html",
    "href": "homework/02.html",
    "title": "Homework: Finding Your Way in R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\nNote: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session)."
  },
  {
    "objectID": "homework/02.html#pythagorean-theorem-in-r",
    "href": "homework/02.html#pythagorean-theorem-in-r",
    "title": "Homework: Finding Your Way in R and Python",
    "section": "Pythagorean Theorem in R",
    "text": "Pythagorean Theorem in R\n\\[a^2 + b^2 = c^2\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), where you define the values of \\(a\\) and \\(b\\), and \\(c\\) is determined mathematically. You may need to find the square root function in R to make this work.\n\n# Your pythagorean theorem code goes here"
  },
  {
    "objectID": "homework/02.html#quadratic-formula-in-python",
    "href": "homework/02.html#quadratic-formula-in-python",
    "title": "Homework: Finding Your Way in R and Python",
    "section": "Quadratic Formula in Python",
    "text": "Quadratic Formula in Python\n\\[x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), and then define \\(x1\\) and \\(x2\\), the possible values for \\(x\\). You may find it helpful to define a few additional variables, such as the value of the discriminant \\(\\sqrt{b^2 - 4ac}\\), to make it easier to calculate the results.\n\n# Your quadratic formula code goes here"
  },
  {
    "objectID": "slides/09a-debugging-exercise.html",
    "href": "slides/09a-debugging-exercise.html",
    "title": "Debugging Excercises",
    "section": "",
    "text": "In the following examples, evaluate each problem using the criteria of a minimal reproducible example from this StackOverflow post.\nSpecifically, address the following things:\n\nAre the question and problem description complete?\nIs the issue reproducible? Does it have a description of the problem, with code that reproduces the problem? What could improve it?\nIs the example minimal? Does it include extra code or information that is not necessary?\nDoes the question describe any attempted solutions?\n\nThen, using what you know about R and Python, try to debug the problem using the strategies in the debugging chapter. Once you are thoroughly stumped, or you believe you have solved the problem, compare your solutions to those given on StackOverflow using the link.\n\nWhy Doesn’t this R function work?\n\nI created the following function to append new strings on a vector of strings called “meals”. However, when I use this function to append an string input into my “meals” vector, it does not work.\n\n add &lt;- function(str) {\n      meals &lt;- append(meals, as.character(str))  \n    }\nLink to original SO post.\n\n\nFunction not working R\n\nI’ve never programmed before and am trying to learn. I’m following that “coursera” course that I’ve seen other people post about — a course offered by Johns Hopkins on R programming.\n\n\nAnyway, this was supposed to be my first function. Yet, it doesn’t work! But when I type out all the steps individually, it runs just fine… Can anyone tell me why?\n\npollutantmean &lt;- function(directory, pollutant, id = 1:332){\n    x&lt;- list.files(\"/Users/mike******/Desktop/directory\", full.names=TRUE)\n    y&lt;- lapply(x, read.csv)\n    z&lt;- do.call(rbind.data.frame, y[id])\n\n    mean(z$pollutant, na.rm=TRUE)\n}\npollutantmean(specdata,nitrate,1:10)\n[1] NA\nWarning message:\nIn mean.default(z$pollutant, na.rm = TRUE) :\n  argument is not numeric or logical: returning NA\n\n####\n\nx&lt;- list.files(\"/Users/mike******/Desktop/specdata\",full.names=TRUE)\ny&lt;- lapply(x,read.csv)\nz&lt;- do.call(rbind.data.frame,y[1:10])\nmean(z$nitrate,na.rm=TRUE)\n[1] 0.7976266\nLink\n\n\nInexplicable error when trying to export my R notebook\n\nGetting this error from R Markdown when trying to export my .RMD\n\n\"Error in filter(Gastropods, Species == \"Cellana\") :  object 'Species' not found Calls: &lt;Anonymous&gt; ... withCallingHandlers -&gt; withVisible -&gt; eval -&gt; eval -&gt; filter\"\n\nHowever, all my plots are coming out successfully. I can clearly see in the data that the species column is there and that Cellana is a species. No spelling errors or anything.\n\n\nMy first 20 or so lines of code are below (between the ### symbols)\n\n\n\n###\n---\ntitle: \" Lab Report 2 - z5016113\"\noutput: html_notebook\ni---\n\n#1. Gastropod abundance vs. height on the shore\n\n```{r}\nGastropods &lt;- read.csv(file = \"MaroubraZones.csv\", header = TRUE)\nlibrary(ggplot2, dplyr)\n```\n\n```{r}\nGastropods$Zone &lt;- factor(Gastropods$Zone, levels = c(\"Low\", \"Mid\", \"High\"))\n```\n\n```{r}\nCellana &lt;- filter(Gastropods, Species == \"Cellana\")  ------&gt; This line is causing the error\n```\n\n```{r}\nggplot(Cellana, aes(Zone, Abundance)) + geom_boxplot()\n```\n###\n\n\nYou can find this sample file here\nLink\n\n\nPython if elif else statement\n\nI’m trying to create a program with python that calculate the cost for shipping.\n\n\nHowever, I can’t run the program to where it works properly.\n\n\nWhat ever my total is the same amount comes out as $6 for US and $8 for Canada. I can’t seem to get pass that.\n\n\nExample:\n\ntotal = raw_input('What is the total amount for your online shopping?')\ncountry = raw_input('Shipping within the US or Canada?')\n\nif country == \"US\":\n    if total &lt;= \"50\":\n        print \"Shipping Costs $6.00\"\n    elif total &lt;= \"100\":\n            print \"Shipping Costs $9.00\"\n    elif total &lt;= \"150\":\n            print \"Shipping Costs $12.00\"\n    else:\n        print \"FREE\"\n\nif country == \"Canada\":\n    if total &lt;= \"50\":\n        print \"Shipping Costs $8.00\"\n    elif total &lt;= \"100\":\n        print \"Shipping Costs $12.00\"\n    elif total &lt;= \"150\":\n        print \"Shipping Costs $15.00\"\n    else:\n        print \"FREE\"\nLink"
  },
  {
    "objectID": "slides/14-presentation-schedule.html#in-class-presentations",
    "href": "slides/14-presentation-schedule.html#in-class-presentations",
    "title": "Presentation Schedule",
    "section": "In-Class Presentations",
    "text": "In-Class Presentations\n\n\n\n\n\n\n\n\nTime\nTeam\nTitle\n\n\n\n\n12:40 - 12:56\nBreeding\nThe Summary of U.S. Border Crossing/Entry Data\n\n\n1:00 - 1:20\nData Detectives\nThe Summit Story: Data Insights into Himalayan Expeditions\n\n\n1:25 - 1:41\nThe Trio\nInvisible Threats: A Global Look at the Best and Worst Air Quality"
  },
  {
    "objectID": "slides/14-presentation-schedule.html#recordings",
    "href": "slides/14-presentation-schedule.html#recordings",
    "title": "Presentation Schedule",
    "section": "Recordings",
    "text": "Recordings\n\n\n\n\n\n\n\n\nTime\nTeam\nTitle\n\n\n\n\nRecording\nThe Trio\nInvisible Threats: A Global Look at the Best and Worst Air Quality\n\n\nRecording\nBAND-X\nCarbon Footprints on Wheels: Unpacking Vehicle Emissions\n\n\nRecording\nBlack Tea DC\nExploring Coffee Preferences: Insights from the Great American Coffee Taste Test\n\n\nRecording\nData Detectives\nThe Summit Story: Data Insights into Himalayan Expeditions"
  },
  {
    "objectID": "slides/12-simulation-2.html#todays-goals",
    "href": "slides/12-simulation-2.html#todays-goals",
    "title": "Simulation - now with results!",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nWork on deliverable number 3 for homework 11: simulate!\nThree deliverables in total: pseudocode.qmd, craps-code.qmd, and simulation.qmd (this week)"
  },
  {
    "objectID": "slides/12-simulation-2.html#simulate.qmd",
    "href": "slides/12-simulation-2.html#simulate.qmd",
    "title": "Simulation - now with results!",
    "section": "Simulate.qmd",
    "text": "Simulate.qmd\n\nIn your repo, create a file with that name.\nYou need to answer the following three questions:\n\nWhich probability do you want to estimate?\nWhat is the simulation result (in numbers and visuals)?\nWhat is the simulation variability?\n\n\nMake sure to set a seed to make your analysis reproducible."
  },
  {
    "objectID": "slides/12-simulation-2.html#resources",
    "href": "slides/12-simulation-2.html#resources",
    "title": "Simulation - now with results!",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "slides/07-murder.html#this-weeks-big-picture-goal",
    "href": "slides/07-murder.html#this-weeks-big-picture-goal",
    "title": "Murder in SQL City",
    "section": "This week’s big picture goal:",
    "text": "This week’s big picture goal:\nWorking with data filters, joining data"
  },
  {
    "objectID": "slides/07-murder.html#todays-goals",
    "href": "slides/07-murder.html#todays-goals",
    "title": "Murder in SQL City",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nIn Canvas, follow the Github Classroom link to Homework 7\nClone the repo for Homework 7 to your local machine\nMake sure that you are able to render index.qmd\nYou might have to install the package RSQLite\n\nStart solving the murder … by … ahem, finding that crime report."
  },
  {
    "objectID": "slides/07-murder.html#resources",
    "href": "slides/07-murder.html#resources",
    "title": "Murder in SQL City",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "slides/05-data-explorations.html#this-weeks-big-picture-goal",
    "href": "slides/05-data-explorations.html#this-weeks-big-picture-goal",
    "title": "Exploring Data",
    "section": "This week’s big picture goal:",
    "text": "This week’s big picture goal:\nGetting comfortable working with data sets and start asking questions!"
  },
  {
    "objectID": "slides/05-data-explorations.html#organization",
    "href": "slides/05-data-explorations.html#organization",
    "title": "Exploring Data",
    "section": "Organization",
    "text": "Organization\n\nHomework #4: make sure to put the link to your repo on Github into Canvas\nHomework #5:\nplease check that you can access the github classroom repo\nDr. Vanderplas will take over on Thursday"
  },
  {
    "objectID": "slides/05-data-explorations.html#todays-goals",
    "href": "slides/05-data-explorations.html#todays-goals",
    "title": "Exploring Data",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nClone the repo for Homework 5\nMake sure that you are able to render index.qmd\nStart to explore! https://www.mrdbourke.com/a-gentle-introduction-to-exploratory-data-analysis/"
  },
  {
    "objectID": "slides/05-data-explorations.html#resources",
    "href": "slides/05-data-explorations.html#resources",
    "title": "Exploring Data",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "slides/03-fizzing-and-buzzing.html#organizationclean-up",
    "href": "slides/03-fizzing-and-buzzing.html#organizationclean-up",
    "title": "Fizzing and Buzzing",
    "section": "Organization/clean-up",
    "text": "Organization/clean-up\n\nHomework #2: make sure to put the link to your repo on Github into Canvas\nHomework #3 repo structure"
  },
  {
    "objectID": "slides/03-fizzing-and-buzzing.html#this-weeks-big-picture-goal",
    "href": "slides/03-fizzing-and-buzzing.html#this-weeks-big-picture-goal",
    "title": "Fizzing and Buzzing",
    "section": "This week’s big picture goal:",
    "text": "This week’s big picture goal:\nGoing from using functions to writing the first functions"
  },
  {
    "objectID": "slides/03-fizzing-and-buzzing.html#todays-goals",
    "href": "slides/03-fizzing-and-buzzing.html#todays-goals",
    "title": "Fizzing and Buzzing",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\nUnderstand\n\nWorking with packages in R and Python\nDistinguish and recognize data structures (data as in objects, not the statistics data)\nMatrix operations\n\nDo\n\nfirst part of homework #3\n\nRead-up on\n\nControl Structures, program flows\nWriting Functions"
  },
  {
    "objectID": "slides/03-fizzing-and-buzzing.html#resources",
    "href": "slides/03-fizzing-and-buzzing.html#resources",
    "title": "Fizzing and Buzzing",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "slides/03-fizzing-and-buzzing.html#next-class",
    "href": "slides/03-fizzing-and-buzzing.html#next-class",
    "title": "Fizzing and Buzzing",
    "section": "Next class",
    "text": "Next class\n\nFunction writing in R and Python"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#todays-goals",
    "href": "slides/02a-Finding-Your-Way.html#todays-goals",
    "title": "Finding your way in R and Python",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nKnow the 3 different ways to execute code from within RStudio\n\nTerminal (Command Line)\nSource Script (RStudio Button)\nInteractive Mode (line by line)\n\nDifferentiate between the Console and the Terminal\nDifferentiate between R and Python in the Console"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#rstudio-projects",
    "href": "slides/02a-Finding-Your-Way.html#rstudio-projects",
    "title": "Finding your way in R and Python",
    "section": "RStudio Projects",
    "text": "RStudio Projects\nRStudio projects are a way to keep your work organized.\nLet’s create one for this week’s class work.\n\nCreating an RStudio Project"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#ways-to-execute-code",
    "href": "slides/02a-Finding-Your-Way.html#ways-to-execute-code",
    "title": "Finding your way in R and Python",
    "section": "Ways to Execute Code",
    "text": "Ways to Execute Code\nDownload madlibs.py and place it in your newly created project."
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#command-line",
    "href": "slides/02a-Finding-Your-Way.html#command-line",
    "title": "Finding your way in R and Python",
    "section": "Command Line",
    "text": "Command Line\n\nRunning madlibs.py at the command line"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#source-script",
    "href": "slides/02a-Finding-Your-Way.html#source-script",
    "title": "Finding your way in R and Python",
    "section": "Source Script",
    "text": "Source Script\n\nRunning madlibs.py using Source Script in RStudio"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#next-class",
    "href": "slides/02a-Finding-Your-Way.html#next-class",
    "title": "Finding your way in R and Python",
    "section": "Next Class",
    "text": "Next Class\n\nBasic Data Types\nCreating Variables\nUsing R/Python as a calculator\nIntro to Debugging"
  },
  {
    "objectID": "slides/01a-intro.html#goals-for-today",
    "href": "slides/01a-intro.html#goals-for-today",
    "title": "Stat 850 Introduction",
    "section": "Goals for Today",
    "text": "Goals for Today\n\nSyllabus Q&A\nInstall software:\n\nR\nPython\nquarto\nRStudio\ngit\n\nStretch goal: set up Git"
  },
  {
    "objectID": "slides/01a-intro.html#preview-thursday",
    "href": "slides/01a-intro.html#preview-thursday",
    "title": "Stat 850 Introduction",
    "section": "Preview: Thursday",
    "text": "Preview: Thursday\n\nSet up Git\nHow to submit homework with Github Classroom\nGit concepts: Push/Pull"
  },
  {
    "objectID": "slides/01a-intro.html#reminders",
    "href": "slides/01a-intro.html#reminders",
    "title": "Stat 850 Introduction",
    "section": "Reminders",
    "text": "Reminders\n\nHomework due Monday at 8pm"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 850: Computing Tools for Statistics",
    "section": "",
    "text": "Course Materials\nDates shown are due dates (for homework, projects) and dates by which initial comments/annotations should be made (reading).\nMost classes will not contain slide presentations, but when there are slides to share, they will be provided here.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\n\n\nTitle\n\n\n\n\n\n\nDec 12, 2024\n\n\n\n\n\nPresentation Schedule\n\n\n\n\nDec 8, 2024\n\n\n\n\n\nSample Report\n\n\n\n\nDec 3, 2024\n\n\n\n\n\nPresentation Schedule\n\n\n\n\nNov 25, 2024\n\n\n\n\n\nHomework 11: Simulation (Probability)\n\n\n\n\nNov 19, 2024\n\n\n\n\n\nSimulation - now with results!\n\n\n\n\nNov 18, 2024\n\n\n\n\n\nHomework 12: Shiny\n\n\n\n\nNov 15, 2024\n\n\n\n\n\nHomework 11: Simulation (Implementation)\n\n\n\n\nNov 8, 2024\n\n\n\n\n\nHomework 11: Simulation (Pseudocode)\n\n\n\n\nNov 5, 2024\n\n\n\n\n\nSimulation\n\n\n\n\nNov 4, 2024\n\n\n\n\n\nHomework 10: Professional Communication\n\n\n\n\nOct 29, 2024\n\n\n\n\n\nLaTeX and Markdown\n\n\n\n\nOct 24, 2024\n\n\n\n\n\nDebugging Excercises\n\n\n\n\nOct 21, 2024\n\n\n\n\n\nHomework: Awesomely Bad Graphics\n\n\n\n\nOct 14, 2024\n\n\n\n\n\nHomework: Murder in SQL City\n\n\n\n\nOct 14, 2024\n\n\n\n\n\nProject Guidelines\n\n\n\n\nOct 14, 2024\n\n\n\n\n\nStat 850 Project Proposal\n\n\n\n\nOct 8, 2024\n\n\n\n\n\nMurder in SQL City\n\n\n\n\nOct 7, 2024\n\n\n\n\n\nString Processing and Data Wrangling in R and Python\n\n\n\n\nOct 3, 2024\n\n\n\n\n\nWrangling Data\n\n\n\n\nOct 1, 2024\n\n\n\n\n\nWrangling Data\n\n\n\n\nSep 30, 2024\n\n\n\n\n\nChocolate Chip Cookies\n\n\n\n\nSep 24, 2024\n\n\n\n\n\nExploring Data\n\n\n\n\nSep 20, 2024\n\n\n\n\n\nHomework: Data Programming\n\n\n\n\nSep 17, 2024\n\n\n\n\n\nCase Studies\n\n\n\n\nSep 13, 2024\n\n\n\n\n\nHomework: Fizzbuzz\n\n\n\n\nSep 9, 2024\n\n\n\n\n\nHomework: Finding Your Way in R and Python\n\n\n\n\nSep 9, 2024\n\n\n\n\n\nFizzing and Buzzing\n\n\n\n\nSep 5, 2024\n\n\n\n\n\nFinding your way in R and Python\n\n\n\n\nSep 3, 2024\n\n\n\n\n\nFinding your way in R and Python\n\n\n\n\nSep 2, 2024\n\n\n\n\n\n👋 The Basics of GitHub\n\n\n\n\nAug 29, 2024\n\n\n\n\n\nStat 850: Git and Github\n\n\n\n\nAug 27, 2024\n\n\n\n\n\nStat 850 Introduction\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Stat 850",
    "section": "",
    "text": "Course Description\nIntroductions to statistical computing packages and document preparation software. Topics include: graphical techniques, data management, Monte Carlo simulation, dynamic document preparation, presentation software.\n\n\nCourse Goals\n\nLearn how to use R and/or Python for data analysis, data processing, and data visualization.\nBecome familiar with the process, techniques, and goals of exploratory data analysis.\nCreate, assess, and debug code effectively.\n\nUse online resources to find software to perform a task, comparing approaches taken by competing programs.\nRead error messages, find related problems in online forums, and isolate the conditions necessary to generate the error.\nGenerate minimum working examples or reproducible examples of errors in order to ask for help effectively.\n\nCommunicate statistical results using reproducible, dynamic tools. Understand the importance of reproducibility in scientific computation.\n\n\n\nCourse Objectives\n(what you should be able to do at the end of this course)\n\nClean and format the data appropriately for the intended analysis or visualization method. (Goals: 1)\nExplore a data set using numerical and visual summaries, developing questions which can be answered using statistics. (Goals: 1, 2)\nEvaluate methods or software to assess relevance to a problem. Compare similar options to determine which are more appropriate for a given application (Goals: 1, 3)\nTest and debug software, using the following sequence: (Goals: 3, 4)\n\nReproduce the error in a new environment,\nCreate a minimal reproducible example,\nResearch the error message and evaluate online resources for relevance,\nAsk for help, describing the error or problem appropriately.\n\nDocument the data, methods, and results of an analysis using reproducible methods. (Goals: 1, 2, 4)\n\n\n\nTextbook\nIn keeping with the principles of this course, any course materials I develop will be made available on GitHub, in the (continuously evolving) course textbook. The book is laid out with the same structure as the course. In order to avoid duplicating content available elsewhere, where it is appropriate, I will link to relevant material available on other sites. This makes the course easier to maintain, but it also ensures you get the most relevant and up to date instructions.\nIn addition, you may find it useful to reference some of the following resources that I have consulted while assembling the textbook. Most are available online for free, though some require an institutional email address.\n\nR for Data Science\nAdvanced R\nPython for Everybody\nPython for Data Analysis *\nPython Data Science Handbook *\n\n* Available online for free if you register with your UNL email address."
  },
  {
    "objectID": "slides/01b-intro.html#goals-for-today",
    "href": "slides/01b-intro.html#goals-for-today",
    "title": "Stat 850: Git and Github",
    "section": "Goals for Today",
    "text": "Goals for Today\n\nSet up Git (Chapter 5 of the textbook)\nHow to submit homework with Github Classroom\nGit concepts: Push/Pull"
  },
  {
    "objectID": "slides/01b-intro.html#preview-next-week",
    "href": "slides/01b-intro.html#preview-next-week",
    "title": "Stat 850: Git and Github",
    "section": "Preview: Next Week",
    "text": "Preview: Next Week\n\nFinding your way in R and Python\n\nNavigating RStudio\nExecution modes: script, console, interactive\nPython vs. R code\n\nIntroduction to Programming"
  },
  {
    "objectID": "slides/01b-intro.html#reminders",
    "href": "slides/01b-intro.html#reminders",
    "title": "Stat 850: Git and Github",
    "section": "Reminders",
    "text": "Reminders\n\nHomework due Monday at 8pm\nRead the assigned chapters in the textbook (7, 8) for class next week!"
  },
  {
    "objectID": "slides/02b-Finding-Your-Way.html#todays-goals",
    "href": "slides/02b-Finding-Your-Way.html#todays-goals",
    "title": "Finding your way in R and Python",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\nUnderstand\n\nBasic Data Types\nCreating Variables\nUsing R/Python as a calculator\n\nPractice working with errors\n\nIntro to Debugging"
  },
  {
    "objectID": "slides/02b-Finding-Your-Way.html#work-on-the-homework",
    "href": "slides/02b-Finding-Your-Way.html#work-on-the-homework",
    "title": "Finding your way in R and Python",
    "section": "Work on the homework!",
    "text": "Work on the homework!\nDue date: Monday, Sep 9"
  },
  {
    "objectID": "slides/02b-Finding-Your-Way.html#next-class",
    "href": "slides/02b-Finding-Your-Way.html#next-class",
    "title": "Finding your way in R and Python",
    "section": "Next class",
    "text": "Next class\n\nData structures: vectors, lists, arrays, …\nArithmetic operators for matrices\nFunction writing in R and Python"
  },
  {
    "objectID": "slides/04-case-studies.html#organization",
    "href": "slides/04-case-studies.html#organization",
    "title": "Case Studies",
    "section": "Organization",
    "text": "Organization\n\nHomework #3: make sure to put the link to your repo on Github into Canvas\nHomework #4:\nplease check that you can access the github classroom repo\nHeads-up: watch 1h video before next class: tidy tuesday screencast"
  },
  {
    "objectID": "slides/04-case-studies.html#this-weeks-big-picture-goal",
    "href": "slides/04-case-studies.html#this-weeks-big-picture-goal",
    "title": "Case Studies",
    "section": "This week’s big picture goal:",
    "text": "This week’s big picture goal:\nConsolidate your knowledge\nChapter 15\nPractice! Practice! Practice!"
  },
  {
    "objectID": "slides/04-case-studies.html#todays-goals",
    "href": "slides/04-case-studies.html#todays-goals",
    "title": "Case Studies",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nClone the repo for Homework 4\nMake sure that you are able to render index.qmd\n\nyou might have to install some packages (R package curl, python package plotnine)\n\nRead actively through the examples in Chapter 15\n\nload the data from the homework into an R session\nadapt (if possible) the commands from the examples to the homework data"
  },
  {
    "objectID": "slides/04-case-studies.html#resources",
    "href": "slides/04-case-studies.html#resources",
    "title": "Case Studies",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "slides/04-case-studies.html#next-class",
    "href": "slides/04-case-studies.html#next-class",
    "title": "Case Studies",
    "section": "Next class",
    "text": "Next class\n\nPlanning out code"
  },
  {
    "objectID": "slides/06-data-wrangling.html#this-weeks-big-picture-goal",
    "href": "slides/06-data-wrangling.html#this-weeks-big-picture-goal",
    "title": "Wrangling Data",
    "section": "This week’s big picture goal:",
    "text": "This week’s big picture goal:\nWorking with text and practicing exploration skills"
  },
  {
    "objectID": "slides/06-data-wrangling.html#organization",
    "href": "slides/06-data-wrangling.html#organization",
    "title": "Wrangling Data",
    "section": "Organization",
    "text": "Organization\nHomework #5:\n\nmake sure to put the link to your repo on Github into Canvas\nauthorization: usethis::create_github_token()\nwhich files to push? any original files!"
  },
  {
    "objectID": "slides/06-data-wrangling.html#todays-goals",
    "href": "slides/06-data-wrangling.html#todays-goals",
    "title": "Wrangling Data",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nIn Canvas, follow the Github Classroom link to Homework 6\nClone the repo for Homework 6 to your local machine\nMake sure that you are able to render index.qmd\nStart wrangling these poems!\n\nTry to get past checkpoints 1 and 2 for both python and R, so you can focus on the exploration on Thursday"
  },
  {
    "objectID": "slides/06-data-wrangling.html#helpful-functions",
    "href": "slides/06-data-wrangling.html#helpful-functions",
    "title": "Wrangling Data",
    "section": "Helpful functions",
    "text": "Helpful functions\n\nin R: separate_longer_delim, str_count (make sure to check ?boundary()),\nin python: str.split, str.count, explode"
  },
  {
    "objectID": "slides/06-data-wrangling.html#resources",
    "href": "slides/06-data-wrangling.html#resources",
    "title": "Wrangling Data",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "slides/11-simulation.html#homework-project-work",
    "href": "slides/11-simulation.html#homework-project-work",
    "title": "Simulation",
    "section": "Homework & Project work",
    "text": "Homework & Project work\n\ndue dates … some are harder than others.\n\nI realize that RStudio was freezing up … a lot. So this one is not as hard.\nGenerally: you can (re-)submit assignments. If they are egregiously late, I will deduct a late penalty.\nActually hard deadline: Monday after Thanksgiving, Dec 2 2024"
  },
  {
    "objectID": "slides/11-simulation.html#remainder-of-the-semester",
    "href": "slides/11-simulation.html#remainder-of-the-semester",
    "title": "Simulation",
    "section": "Remainder of the semester",
    "text": "Remainder of the semester\n\nOnly two more homework assignments!\n\nSimulation & interactive graphics\n\nProject work!\n\nhttps://posit.co/blog/closeread-prize-announcement/"
  },
  {
    "objectID": "slides/11-simulation.html#this-weeks-big-picture-goal",
    "href": "slides/11-simulation.html#this-weeks-big-picture-goal",
    "title": "Simulation",
    "section": "This week’s big picture goal:",
    "text": "This week’s big picture goal:\nBringing everything together - working on a project-like homework."
  },
  {
    "objectID": "slides/11-simulation.html#todays-goals",
    "href": "slides/11-simulation.html#todays-goals",
    "title": "Simulation",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nIn Canvas, follow the Github Classroom link to Homework 11\nClone the repo for Homework 11 to your local machine\nThree deliverables in total: pseudocode.qmd (this week), craps-code.qmd, and simulation.qmd"
  },
  {
    "objectID": "slides/11-simulation.html#resources",
    "href": "slides/11-simulation.html#resources",
    "title": "Simulation",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "slides/13-presentation-schedule.html#todays-goals",
    "href": "slides/13-presentation-schedule.html#todays-goals",
    "title": "Presentation Schedule",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nSet the presentation schedule (and agree on a format)\nWork on the report and/or the presentation"
  },
  {
    "objectID": "slides/13-presentation-schedule.html#from-the-presentation-rubric",
    "href": "slides/13-presentation-schedule.html#from-the-presentation-rubric",
    "title": "Presentation Schedule",
    "section": "From the Presentation rubric",
    "text": "From the Presentation rubric\n\nDue date: Thursday, Dec 12\nWhat to submit:\n\nlink to video of the presentation (link in Canvas)\nslides.qmd in project repository on github\n\nLength of Presentation:\n\n4*(n+1) minutes, where n is team size"
  },
  {
    "objectID": "slides/13-presentation-schedule.html#present-live-or-record",
    "href": "slides/13-presentation-schedule.html#present-live-or-record",
    "title": "Presentation Schedule",
    "section": "Present live or record?",
    "text": "Present live or record?\nFive teams with 18 members in total: \\(18 \\cdot 4 + 5\\cdot 4 = 92\\) minutes\nYour team’s choice: submit your choice on Canvas"
  },
  {
    "objectID": "slides/13-presentation-schedule.html#resources",
    "href": "slides/13-presentation-schedule.html#resources",
    "title": "Presentation Schedule",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "slides/06b-data-wrangling.html#this-weeks-big-picture-goal",
    "href": "slides/06b-data-wrangling.html#this-weeks-big-picture-goal",
    "title": "Wrangling Data",
    "section": "This week’s big picture goal:",
    "text": "This week’s big picture goal:\nWorking with text and practicing exploration skills"
  },
  {
    "objectID": "slides/06b-data-wrangling.html#organization",
    "href": "slides/06b-data-wrangling.html#organization",
    "title": "Wrangling Data",
    "section": "Organization",
    "text": "Organization\n\ncode for homework submissions:\n\nalways make sure that the index.qmd file renders for you (that’s where your answers are supposed to be)\ncomment out any and all calls that produce:\n\nexcessive output: ls(), dir(), print()\nadditional windows: View(), ? (or ??, help),\ninstall software: install.packages(),\n\nreferences to files outside of your repository"
  },
  {
    "objectID": "slides/06b-data-wrangling.html#projects",
    "href": "slides/06b-data-wrangling.html#projects",
    "title": "Wrangling Data",
    "section": "Projects",
    "text": "Projects"
  },
  {
    "objectID": "slides/06b-data-wrangling.html#todays-goals",
    "href": "slides/06b-data-wrangling.html#todays-goals",
    "title": "Wrangling Data",
    "section": "Today’s Goals:",
    "text": "Today’s Goals:\n\nExploration!\n\nIdeally you have passed checkpoint 2 for both R and python. If not, finish up checkpoint 2 for one language and proceed with that."
  },
  {
    "objectID": "slides/06b-data-wrangling.html#resources",
    "href": "slides/06b-data-wrangling.html#resources",
    "title": "Wrangling Data",
    "section": "Resources",
    "text": "Resources\n\nR cheat sheet\npython cheat sheet"
  },
  {
    "objectID": "homework/01.html",
    "href": "homework/01.html",
    "title": "👋 The Basics of GitHub",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/01.html#course-overview-and-learning-outcomes",
    "href": "homework/01.html#course-overview-and-learning-outcomes",
    "title": "👋 The Basics of GitHub",
    "section": "🤓 Course overview and learning outcomes",
    "text": "🤓 Course overview and learning outcomes\nThe goal of this course is to give you a brief introduction to GitHub. We’ll also provide you with materials for further learning and a few ideas to get you started on our platform. 🚀"
  },
  {
    "objectID": "homework/01.html#git-and-github",
    "href": "homework/01.html#git-and-github",
    "title": "👋 The Basics of GitHub",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nGit is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you’ve worked on and can easily revert back to an older version if need be. It also makes working with others easier—groups of people can work together on the same project and merge their changes into one final source!\nGitHub is a way to use the same power of Git all online with an easy-to-use interface. It’s used across the software world and beyond to collaborate and maintain the history of projects.\nGitHub is home to some of the most advanced technologies in the world. Whether you’re visualizing data or building a new game, there’s a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we’ll dig into the rest later."
  },
  {
    "objectID": "homework/01.html#understanding-the-github-flow",
    "href": "homework/01.html#understanding-the-github-flow",
    "title": "👋 The Basics of GitHub",
    "section": "Understanding the GitHub flow",
    "text": "Understanding the GitHub flow\nThe GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.\n\nRepositories\nA repository is where your project work happens–think of it as your project folder. It contains all of your project’s files and revision history. You can work within a repository alone or invite others to collaborate with you on those files.\n\n\nCloning\nWhen a repository is created with GitHub, it’s stored remotely in the ☁️. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more. To learn more about cloning, read “Cloning a Repository”.\n\n\nCommitting and pushing\nCommitting and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you’re ready to share it. You can make a commit when you have made changes to your project that you want to “checkpoint.” You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g. “Added a README with information about our project”).\nOnce you have a commit or multiple commits that you’re ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you’ll get used to it 🙂"
  },
  {
    "objectID": "homework/01.html#github-terms-to-know",
    "href": "homework/01.html#github-terms-to-know",
    "title": "👋 The Basics of GitHub",
    "section": "💻 GitHub terms to know",
    "text": "💻 GitHub terms to know\n\nRepositories\nWe mentioned repositories already, they are where your project work happens, but let’s talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your “GitHub dashboard” helps to easily navigate to your repositories and see useful information about them. Make sure you’re logged in to see it!\nRepositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. 😄 To learn more about repositories read “Creating, Cloning, and Archiving Repositories and “About README’s”.\n\n\nBranches\nYou can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository—main. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read “About Branches”.\nNote: In this class, you will not be required to use branches.\n\n\nForks\nA fork is another way to copy a repository, but is usually used when you want to contribute to someone else’s project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read “Fork a repo”\nNote: In this class, you will not be required to use forks.\n\n\nPull requests\nWhen working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read “About Pull Requests”.\nNote: In this course, you will not be required to use pull requests.\n\n\nIssues\nIssues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!\nFor larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this “About Project boards document. You likely won’t need a project board for your assignments, but once you move on to even bigger projects, they’re a great way to organize your team’s work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read “About Issues”.\n\n\nYour user profile\nYour profile page tells people the story of your work through the repositories you’re interested in, the contributions you’ve made, and the conversations you’ve had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you! To learn more about your user profile and adding and updating your profile README, read “Managing Your Profile README”.\n\n\nUsing markdown on GitHub\nYou might have noticed already, but you can add some fun styling to your issues, pull requests, and files. “Markdown” is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub’s flavor of markdown, read “Basic Writing and Formatting Syntax”.\n\n\nEngaging with the GitHub community\nThe GitHub community is vast. There are many types of people who use GitHub in their day to day—students like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start.\n\nStarring repositories\nIf you find a repository interesting or you want to keep track of it, star it! When you star a repository it’s also used as a signal to surface better recommendations on github.com/explore. If you’d like to get back to your starred repositories you can do so via your user profile. To learn more about starring repositories, read “Saving Repositories with Stars”.\n\n\nFollowing users\nYou can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on. To learn more about following users, read “Following People”.\n\n\nBrowsing GitHub Explore\nGitHub Explore is a great place to do just that … explore :smile: You can find new projects, events, and developers to interact with.\nYou can check out the GitHub Explore website at github.com/explore. The more you intereact with GitHub the more tailored your Explore view will be."
  },
  {
    "objectID": "homework/01.html#next-steps",
    "href": "homework/01.html#next-steps",
    "title": "👋 The Basics of GitHub",
    "section": "📝 Next steps",
    "text": "📝 Next steps\n\nClone this repository to your local machine\nOn your local machine, create a new markdown file in this repository named ‘About_Me.md’. Provide a short biography/introduction for yourself and use markdown formatting\n\nMarkdown Basics provides an overview of different formatting options in markdown.\nYou must use at least the following formatting elements: header, subheader, bold or italic, bulleted list, and an image.\n\nCommit your changes to your new file locally and push them back to your github repository. Check on Github to make sure the new file appears.\nTo get full credit for your assignment, you will need to have worked with your git repository locally. I will be able to see if you have used the github editor to make your changes instead :)."
  },
  {
    "objectID": "homework/01.html#resources",
    "href": "homework/01.html#resources",
    "title": "👋 The Basics of GitHub",
    "section": "📚 Resources",
    "text": "📚 Resources\n\nA short video explaining what GitHub is\nGit and GitHub learning resources\nUnderstanding the GitHub flow\nHow to use GitHub branches\nInteractive Git training materials\nGitHub’s Learning Lab\nEducation community forum\nGitHub community forum"
  },
  {
    "objectID": "homework/01.html#optional-extra-steps",
    "href": "homework/01.html#optional-extra-steps",
    "title": "👋 The Basics of GitHub",
    "section": "Optional extra steps",
    "text": "Optional extra steps\n\nOpen a pull request and let your teacher know that you’ve finished this course.\n\nCreate your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What’s your favorite hobby? Learn more about creating your profile README in the document, “Managing Your Profile README”.\nGo to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them.\nLet us know what you liked or didn’t like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey?"
  },
  {
    "objectID": "homework/03.html",
    "href": "homework/03.html",
    "title": "Homework: Fizzbuzz",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions:\n\nYou can answer the questions below in either R or Python. I will give you 50% extra credit if you provide answers in both languages. Otherwise, please feel free to delete the code chunks corresponding to the language you don’t wish to work in.\nOnce you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button).\nCommit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\n\n\nIntroduction to Fizzbuzz\nThe “FizzBuzz Test” is a famous programming interview question.\n\nWrite a program that prints the numbers from 1 to 30. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”\n\nStart by filling in the following table for the numbers 1:30 manually, to get a feel for the task.\n\nFizzbuzz for 1:30\n\n\nInput\nOutput\n\n\n\n\n1\n\n\n\n2\n\n\n\n3\n\n\n\n4\n\n\n\n5\n\n\n\n6\n\n\n\n7\n\n\n\n8\n\n\n\n9\n\n\n\n10\n\n\n\n11\n\n\n\n12\n\n\n\n13\n\n\n\n14\n\n\n\n15\n\n\n\n16\n\n\n\n17\n\n\n\n18\n\n\n\n19\n\n\n\n20\n\n\n\n21\n\n\n\n22\n\n\n\n23\n\n\n\n24\n\n\n\n25\n\n\n\n26\n\n\n\n27\n\n\n\n28\n\n\n\n29\n\n\n\n30\n\n\n\n\nOn paper or using a tool such as https://excalidraw.com, create a program flow map for the sequence of if-statements you need to evaluate for fizzbuzz. Add the picture to the folder containing this file, and name the picture flowchart.png. Add the picture to Git and commit/push your changes.\n\n\n\nProgram Flow map for FizzBuzz\n\n\nIn the chunk below, write code which will solve this problem for a single value x. You should be able to change the value of x at the top of the chunk and still get the correct answer.\n\nx &lt;- 3\n\n# FizzBuzz code goes here\n\n\nx = 3\n\n# FizzBuzz code goes here\n\nModify the code above so that the result is stored in a value y.\n\nx &lt;- 3\ny &lt;- NA\n# FizzBuzz code goes here\n\n\n\nprint(paste(\"For x = \", x, \" my code produces \", y, sep = \"\"))\n\n[1] \"For x = 3 my code produces NA\"\n\n\n\nimport numpy as np\nx = 3\ny = np.nan\n# FizzBuzz code goes here\n\n\n\nprint(\"For x = \"+ str(x)+ \" my code produces \"+ str(y))\n\nFor x = 3 my code produces nan\n\n\n\n\nA vector of FizzBuzz\nThe code in the previous problem only solves FizzBuzz for a single value of x. Extend your code using a loop so that it will work for all values in a vector xx, storing values in a corresponding vector yy.\nYou can copy/paste code from previous chunks to make this chunk easier.\n\nxx &lt;- 1:30\nyy &lt;- rep(NA, times = 30)\n\n# FizzBuzz code goes here\n\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n       x result\n [1,]  1     NA\n [2,]  2     NA\n [3,]  3     NA\n [4,]  4     NA\n [5,]  5     NA\n [6,]  6     NA\n [7,]  7     NA\n [8,]  8     NA\n [9,]  9     NA\n[10,] 10     NA\n[11,] 11     NA\n[12,] 12     NA\n[13,] 13     NA\n[14,] 14     NA\n[15,] 15     NA\n[16,] 16     NA\n[17,] 17     NA\n[18,] 18     NA\n[19,] 19     NA\n[20,] 20     NA\n[21,] 21     NA\n[22,] 22     NA\n[23,] 23     NA\n[24,] 24     NA\n[25,] 25     NA\n[26,] 26     NA\n[27,] 27     NA\n[28,] 28     NA\n[29,] 29     NA\n[30,] 30     NA\n\n\n\nimport pandas as pd\nxx = np.array(range(30)) + 1\nyy = [np.nan]*30\n\n# FizzBuzz code goes here\n\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n     x  result\n0    1     NaN\n1    2     NaN\n2    3     NaN\n3    4     NaN\n4    5     NaN\n5    6     NaN\n6    7     NaN\n7    8     NaN\n8    9     NaN\n9   10     NaN\n10  11     NaN\n11  12     NaN\n12  13     NaN\n13  14     NaN\n14  15     NaN\n15  16     NaN\n16  17     NaN\n17  18     NaN\n18  19     NaN\n19  20     NaN\n20  21     NaN\n21  22     NaN\n22  23     NaN\n23  24     NaN\n24  25     NaN\n25  26     NaN\n26  27     NaN\n27  28     NaN\n28  29     NaN\n29  30     NaN\n\n\n\n\nFunctions and FizzBuzz\nIn the previous question, you extended your fizzbuzz code to iterate through a vector xx and produce a result yy. Can you generalize this, writing a function fizzbuzz that takes a variable x and returns a corresponding fizzbuzzified variable? Your function should be able to handle x that is a vector or a scalar value, and should store your solution in yy.\n\nxx &lt;- sample(1:100, 10) # get a random xx\nyy &lt;- rep(NA, 10)\n\nfizzbuzz &lt;- function(x) {\n  # Your code goes here\n}\n\nyy &lt;- fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n        x\n [1,]  65\n [2,]   7\n [3,]  71\n [4,]  36\n [5,]  66\n [6,]  20\n [7,]   3\n [8,]  86\n [9,]  21\n[10,] 100\n\n\n\nimport pandas as pd\nfrom random import choices\nxx = np.array(choices(range(100), k = 10)) + 1\n\n\ndef fizzbuzz(x):\n  y = [np.nan]*len(x) # this just defines something to return\n  # Your code goes here\n  return y\n\nyy = fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n    x  result\n0  32     NaN\n1  98     NaN\n2  31     NaN\n3  42     NaN\n4  40     NaN\n5  36     NaN\n6  36     NaN\n7  13     NaN\n8  53     NaN\n9  33     NaN\n\n\n\n\nDefensive Programming\nYou cannot always assume that the person using your functions knows what they’re doing. Add a check to the function you wrote in the last question so that it will handle non-numeric input by issuing an error message.\nIn R, you can use the function stopifnot() to halt function execution if there is an error; this will give you a basic error message.\n\nstopifnot(2 &gt; 3)\n\nError: 2 &gt; 3 is not TRUE\n\n\nIn Python, you can use a try: statement with a except: clause. This functions like an if-else statement, where if no error occurs, the except statement is never executed.\n\ntry: \n  int(\"hello\")\nexcept ValueError: \n  print(\"Error: could not turn value into an integer\")\n\nError: could not turn value into an integer\n\n\nSee more examples of this in the Input Validation section of the textbook.\n\nxx &lt;- sample(1:100, 10) # get a random xx\nyy &lt;- rep(NA, 10)\n\nfizzbuzz &lt;- function(x) {\n  # Your code goes here\n}\n\nyy &lt;- fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n       x\n [1,] 88\n [2,] 10\n [3,] 38\n [4,] 36\n [5,] 48\n [6,] 66\n [7,] 21\n [8,] 78\n [9,] 40\n[10,] 24\n\n\n\nimport pandas as pd\nfrom random import choices\nxx = np.array(choices(range(100), k = 10)) + 1\n\n\ndef fizzbuzz(x):\n  y = [np.nan]*len(x) # this just defines something to return\n  # Your code goes here\n  return y\n\nyy = fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n    x  result\n0  99     NaN\n1  84     NaN\n2  75     NaN\n3  28     NaN\n4  57     NaN\n5  60     NaN\n6  43     NaN\n7  22     NaN\n8  19     NaN\n9  80     NaN"
  },
  {
    "objectID": "homework/05.html",
    "href": "homework/05.html",
    "title": "Chocolate Chip Cookies",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/05.html#reading-in-the-data",
    "href": "homework/05.html#reading-in-the-data",
    "title": "Chocolate Chip Cookies",
    "section": "Reading In the Data",
    "text": "Reading In the Data\nFirst, read in the CSV data of cookie ingredients. Make sure that your end-result data has appropriate types for each column - these should match the types provided in the documentation in the README.md file."
  },
  {
    "objectID": "homework/05.html#exploratory-data-analysis",
    "href": "homework/05.html#exploratory-data-analysis",
    "title": "Chocolate Chip Cookies",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nExploratory data analysis is the process of getting familiar with your dataset. To get started, this blog post provides a nice checklist to get you thinking:\n\n\nWhat question(s) are you trying to solve (or prove wrong)?\nWhat kind of data do you have and how do you treat different types?\nWhat’s missing from the data and how do you deal with it?\nWhere are the outliers and why should you care about them?\nHow can you add, change or remove features to get more out of your data?\n\n\n\nGenerating Questions\nGenerate at least 5 questions you might explore using this database of cookie ingredients.\n\n\n\n\n\n\n\n\n\nSkimming the Data\nOne thing we often want to do during EDA is to examine the quality of the data - are there missing values? What quirks might exist in the dataset?\nThe skimr package in R, and the similar skimpy package in python (which has a much better name, in my opinion), can help provide visual summaries of the data.\nInstall both packages, and read the package documentation (R, Python).\n[Part 1] Use each package and generate summaries of your data that require the use of at least some non-default options in each package’s skim function.\n[Part 2] Write 1-2 sentences about what you can tell from each summary display you generate. Did you discover anything new about the data?\n\n\nGenerating Tables\nAnother useful technique for exploratory data analysis is to generate summary tables. You may want to use the dplyr package in R (group_by or count functions), as well as the groupby and count methods in Pandas. Python example, R example\n[Part 1] Using R and Python, generate a table that shows what proportion of recipes contain each type of ingredient, for the most common 20 ingredients.\n[Part 2] Print out a character string that lists all of the ingredients that do not appear in at least 20 recipes.\n(Delete this note, but you can include data values inline in markdown text by using backticks, at least in R. For instance, here is R’s built in value for pi: 3.1415927. Unfortunately, this doesn’t work in python using the knitr markdown engine, but you can print the list out in python anyways using a code chunk.)\n\n\nVisualization\nUsing whatever plotting system you are comfortable with in R or python, see if you can create a couple of useful exploratory data visualizations which address one of the questions you wrote above - or another question which you’ve come up with as you’ve worked on this assignment.\n[Part 1] Create at least one plot (it doesn’t have to be pretty) that showcases an interesting facet of the data.\n[Part 2] Write 2-3 sentences about what you can learn from that plot and what directions you might want to investigate from here."
  },
  {
    "objectID": "homework/07.html",
    "href": "homework/07.html",
    "title": "Homework: Murder in SQL City",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/07.html#instructions",
    "href": "homework/07.html#instructions",
    "title": "Homework: Murder in SQL City",
    "section": "Instructions",
    "text": "Instructions\nNorthwestern University’s Knight lab created a SQL murder mystery to help users sharpen their database skills by solving the crime that happened at SQL city. There are tables with different pieces of information - social media checkins, people, drivers licenses, crime scene reports, police interviews, and more.\nPick R or Python, and solve the murder mystery, showing all of your work in this document.\nYour solution must be reproducible – that is, you should use dplyr verbs, table joins, etc. to solve the mystery, rather than just looking through the tables yourselves.\nYou may work in groups of 2-4 people on this assignment. Each person should turn in their own assignment, but should list their group members as authors.\nMake sure you do your due diligence! You should double check your answer and print out the guilty party’s interview from the database.\nWhen you are finished with the assignment:\n\nOnce you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button).\nCommit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\nProvide the name of the guilty party in the text input field on Canvas, and make sure all of your work is on GitHub to receive full credit.\n\nThe chunks below use the code to read in each of the 8 tables of data for this assignment.\nHints:\n\nYou can use a lot of filter statements, but it will in many cases be easier to use joins.\nSee if you can write code that doesn’t require you to type out knowledge gained from a previous clue (e.g. pipe your results from one query into the next)\n\n\nA crime has taken place and the detective needs your help. The detective gave you the crime scene report, but you somehow lost it. You vaguely remember that the crime was a murder that occurred sometime on January 15, 2018 and that it took place in SQL City. All the clues to this mystery are buried in a huge database, and you need to use R and SAS to navigate through this network of information. Your first step to solving the mystery is to retrieve the corresponding crime scene report from the police department’s database.\nThis database schema may help you figure out how to navigate the database:\n\n\n\nsql-murder-mystery database schema diagram"
  },
  {
    "objectID": "homework/07.html#r",
    "href": "homework/07.html#r",
    "title": "Homework: Murder in SQL City",
    "section": "R",
    "text": "R\n\nlibrary(RSQLite)\nlibrary(DBI)\n\n# Your database connection code goes here. Store the connection as con \ncon &lt;- dbConnect(RSQLite::SQLite(), \"sql-murder-mystery.db\")\n\ntable_names &lt;- c(\"crime_scene_report\", \n                 \"drivers_license\", \n                 \"facebook_event_checkin\",\n                 \"get_fit_now_check_in\", \n                 \"get_fit_now_member\", \n                 \"income\", \n                 \"interview\",\n                 \"person\")\n\n# For each table name, read the tables in and store them as the name of the table\npurrr::walk(table_names, function(x) {\n  assign(x, dbReadTable(con, x), envir = .GlobalEnv)\n})\n\n# close the connection when you're done\ndbDisconnect(con)"
  },
  {
    "objectID": "homework/07.html#python",
    "href": "homework/07.html#python",
    "title": "Homework: Murder in SQL City",
    "section": "Python",
    "text": "Python\n\nimport pandas as pd\nimport sqlite3\n\n# Read sqlite query results into a pandas DataFrame\ncon = sqlite3.connect(\"sql-murder-mystery.db\")\n\ncrime_scene_report = pd.read_sql_query(\"SELECT * from crime_scene_report\", con)\ndrivers_license = pd.read_sql_query(\"SELECT * from drivers_license\", con)\nfacebook_event_checkin = pd.read_sql_query(\"SELECT * from facebook_event_checkin\", con)\nget_fit_now_check_in = pd.read_sql_query(\"SELECT * from get_fit_now_check_in\", con)\nget_fit_now_member = pd.read_sql_query(\"SELECT * from get_fit_now_member\", con)\nincome = pd.read_sql_query(\"SELECT * from income\", con)\ninterview = pd.read_sql_query(\"SELECT * from interview\", con)\nperson = pd.read_sql_query(\"SELECT * from person\", con)\n\n# Verify that result of SQL query is stored in the dataframe\nprint(crime_scene_report.head())\n\n       date  ...      city\n0  20180115  ...       NYC\n1  20180115  ...    Albany\n2  20180115  ...      Reno\n3  20180215  ...  SQL City\n4  20180215  ...  SQL City\n\n[5 rows x 4 columns]\n\n\ncon.close()"
  },
  {
    "objectID": "homework/10.html",
    "href": "homework/10.html",
    "title": "Homework 10: Professional Communication",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/10.html#instructions",
    "href": "homework/10.html#instructions",
    "title": "Homework 10: Professional Communication",
    "section": "Instructions",
    "text": "Instructions\n\nPart 1\nFor this assignment, you will create a set of slides in at least two different programs – one that requires beamer/LaTeX and one that is HTML-based (reveal.js, xaringan, etc.). You may pick any of the libraries mentioned in the textbook or any modules you discover online.\nIn your slides, I’d like you to introduce yourself, provide some basic biographical information (birthday, where you grew up, what program you’re in, and when you expect to graduate). On subsequent slides, you should provide:\n\nA picture of your favorite animal\nYour favorite plot (can be one you’ve already generated in this class), which should be generated as part of your document (you can’t just include the picture).\nA link to your CV, which you will create in the next part.\n\nYou should not show any code, automatically generated error messages, etc. in your generated files - you should only show the end product.\nThese slide decks should have at most 5 slides (title, introduction, animal picture, plot, and CV link), so hopefully they won’t take too much time. The goal of the assignment is that you will be familiar with the advantages and disadvantages of each slide ecosystem.\n\n\nPart 2\nUse one of the CV packages mentioned in the textbook (or another LaTeX or markdown CV package that you want to try) to create a basic CV. I will not be grading the CV on how much content there is, so don’t worry if you don’t have publications, etc. You can add a fake publication if you want, just put the title as XXX sample XXX or something.\nYou can customize your CV as you like – it’s a good idea to keep your CV up to date, so take the time to do that now if you want.\nAnother good source for CV templates is Overleaf\n\n\nPart 3\nUse a GitHub pages site (.github.io) to host your CV and slide decks.\nSteps: 1. Set up github pages for your user, as in the video. Make sure your repository is set to be public. 2. In your .github.io repository, upload your CV and slides. 3. In your .github.io repository, edit the README.md file to link to your CV and slides. You can use local links (e.g. [link text](file.html)). This will allow you to navigate from .github.io to your slides and CV so that you can get good links.\nUpload the link to your .github.io page to Canvas to complete this assignment.\nNote, this assignment does not require you to make changes to this file or repository. All of your work will be done in your .github.io repository, which will be public.\nSome things to keep in mind:\n\nYou don’t need to commit every file latex/markdown generates: only commit the essentials:\n\nsource document,\nany file dependencies (like pictures or data), and\nthe final result (if you are planning to make the final result available online).\n\nWhen you ask for help, remember to make your question as reproducible as possible!\n\nUpload the link to the compiled index.html file to Canvas to complete this assignment."
  },
  {
    "objectID": "homework/11b.html",
    "href": "homework/11b.html",
    "title": "Homework 11: Simulation (Implementation)",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/11b.html#before-you-start",
    "href": "homework/11b.html#before-you-start",
    "title": "Homework 11: Simulation (Implementation)",
    "section": "Before you start:",
    "text": "Before you start:\nGo to _quarto.yml and fill in your name. This will ensure that all documents in this project have your name on them."
  },
  {
    "objectID": "homework/11b.html#rules-for-this-assignment",
    "href": "homework/11b.html#rules-for-this-assignment",
    "title": "Homework 11: Simulation (Implementation)",
    "section": "Rules for this assignment:",
    "text": "Rules for this assignment:\n\nYou must write your own code for this assignment. You may work with other students and discuss the problem and how to solve it, but your code must be written individually.\nYou may use generative AI on this assignment, but any prompt/script must be saved and turned in with the assignment. You must also be able to explain every line of code you submit, whether or not you used AI to write it."
  },
  {
    "objectID": "homework/11b.html#assignment-process",
    "href": "homework/11b.html#assignment-process",
    "title": "Homework 11: Simulation (Implementation)",
    "section": "Assignment Process",
    "text": "Assignment Process\nYou will have 3 weeks to complete the steps of this assignment.\n\npseudocode.qmd - you will design pseudocode to play and summarize one or more games of craps, with some help from generative AI.\ncraps-code.qmd - you will write code (using any language taught in this class) to implement the simulated game of craps using the pseudocode created in the first week.\nsimulation.qmd - you will write code to answer a complex probability question using your craps code from week 2.\n\nI will grade pseudocode.qmd after the first week, craps-code.qmd after the second week, and simulation.qmd after the end of third week. Your assignment will be graded on the progress in your github repository at the end of each week, so please make sure you push your code after each significant modification."
  },
  {
    "objectID": "homework/11b.html#grading-schema",
    "href": "homework/11b.html#grading-schema",
    "title": "Homework 11: Simulation (Implementation)",
    "section": "Grading Schema",
    "text": "Grading Schema\n\nThe pseudocode for this assignment is worth one homework grade.\nThe code for the game of craps is worth a second homework grade.\nThe simulation results using the code in the previous assignment is worth a 3rd homework grade.\n\n\nPseudocode rubric\n\n\nCode rubric\n\n\nSimulation rubric"
  },
  {
    "objectID": "homework/12.html",
    "href": "homework/12.html",
    "title": "Homework 12: Shiny",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/12.html#instructions",
    "href": "homework/12.html#instructions",
    "title": "Homework 12: Shiny",
    "section": "Instructions",
    "text": "Instructions\nUse the TidyTuesday Cocktail Data to create a shiny applet containing the following:\n\nA visual exploration of the cocktail data\nA way for a user to search through cocktail recipes by ingredient\n\nYour applet should make use of reactivity in both components, but the specifics of what you do and how you do it are up to you.\nOnce you’re satisfied with your applet, upload it to ShinyApps.io. You should be able to use the free hosting - you’re not creating any high-traffic applications yet.\nYou can find the instructions for deploying your application here.\nWhen you’ve deployed your application, edit this README to contain a link to your applet."
  },
  {
    "objectID": "project/proposal.html",
    "href": "project/proposal.html",
    "title": "Stat 850 Project Proposal",
    "section": "",
    "text": "Each member of your team should modify this document in some way and push their modifications to the repository in a separate commit. This will ensure that you have set your repository up in a way that ensures all group members are working with the same repository.\nPlease ensure that you have set your git name and email address on your computer by modifying the following commands and running them in the terminal:\ngit config --global user.name \"Mona Lisa\"\ngit config --global user.email \"mona@lisa.com\"\nIn the proposal as in the final report, all of your code chunks should be set so that echo = F, which prevents the code from being printed in the report. You should also set message = F, warning = F, which will reduce the amount of additional output which is present in the report. You can customize the execution of code in quarto by using additional options, some of which are detailed here."
  },
  {
    "objectID": "project/proposal.html#instructions",
    "href": "project/proposal.html#instructions",
    "title": "Stat 850 Project Proposal",
    "section": "",
    "text": "Each member of your team should modify this document in some way and push their modifications to the repository in a separate commit. This will ensure that you have set your repository up in a way that ensures all group members are working with the same repository.\nPlease ensure that you have set your git name and email address on your computer by modifying the following commands and running them in the terminal:\ngit config --global user.name \"Mona Lisa\"\ngit config --global user.email \"mona@lisa.com\"\nIn the proposal as in the final report, all of your code chunks should be set so that echo = F, which prevents the code from being printed in the report. You should also set message = F, warning = F, which will reduce the amount of additional output which is present in the report. You can customize the execution of code in quarto by using additional options, some of which are detailed here."
  },
  {
    "objectID": "project/proposal.html#data",
    "href": "project/proposal.html#data",
    "title": "Stat 850 Project Proposal",
    "section": "Data",
    "text": "Data\n\nSource\nThe data we are using in this project comes from [link to web site].\nIf you cannot link directly to the data file, then you need to additionally describe how someone could acquire the same data:\n\nYou can download the data directly using [process]\n\nProvide some code to read in the data (either stored in the repository or read in directly from the source).\n\n\nDescription\nThis dataset contains information about …\nIt was collected from …\nHere is a data dictionary showing each variable, the type of variable, units, and range of values that are possible:\nNote: this is an example table, please modify to actually match your data. Ensure that all of the same information is represented.\n\n\n\n\n\n\n\n\n\n\nName\nDescription\nType\nUnits\nRange/Values\n\n\n\n\nday_of_week\nThe day of the week on which the observation took place\ncategorical\nNA\n0 = Sunday\n1 = Monday\n…\n6 = Saturday\n7 = Unknown\n\n\nweight\nThe weight of the individual\nnumeric\nlbs\n0 - 300 (max weight measurable on the scale used)\nNA indicates missing data\n\n\ntime\nThe time of the observation\nnumeric\nHHMM\n0000 corresponds to midnight,\n2359 corresponds to 1 minute before midnight on the same day."
  },
  {
    "objectID": "project/proposal.html#project-goals",
    "href": "project/proposal.html#project-goals",
    "title": "Stat 850 Project Proposal",
    "section": "Project Goals",
    "text": "Project Goals\nDescribe why this data is interesting and what you hope to do with it.\nWe will use [dataset] to explore the following topics:\n\ninteresting thing 1\ninteresting thing 2\n…\n\nWe expect to create\n\ndescription of some of the graphs you might create\na shiny application\na statistical model\n…"
  },
  {
    "objectID": "project/proposal.html#division-of-labor",
    "href": "project/proposal.html#division-of-labor",
    "title": "Stat 850 Project Proposal",
    "section": "Division of Labor",
    "text": "Division of Labor\nDescribe how you plan to work together as a team. Set intermediate deadlines - what do you plan to have done by the project check-in? The more you have done (report/slides/code), the better feedback I can give you."
  },
  {
    "objectID": "project/proposal.html#additional-comments",
    "href": "project/proposal.html#additional-comments",
    "title": "Stat 850 Project Proposal",
    "section": "Additional Comments",
    "text": "Additional Comments\nWhat concerns do you have about this project? This is your place to provide feedback about the project guidelines and ask clarifying questions for me to address either individually or in class, if the question is relevant to everyone."
  },
  {
    "objectID": "slides/10a-latex-markdown.html#contents",
    "href": "slides/10a-latex-markdown.html#contents",
    "title": "LaTeX and Markdown",
    "section": "Contents",
    "text": "Contents\n(in chronological order)\n\nLaTeX\nMarkdown and Pandoc\nAdding in R\n\nSweave/knitr\nRmarkdown/quarto\n\nSpecial Document Types"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#latex-a-document-prep-system",
    "href": "slides/10a-latex-markdown.html#latex-a-document-prep-system",
    "title": "LaTeX and Markdown",
    "section": "LaTeX: a document prep system",
    "text": "LaTeX: a document prep system\n\n\nThink of it as the digital version of a printing press.\nYou will use tags to control the formatting of your document, and then compile it to PDF.\n\n\\emph{} for italic text\n\\textbf{} for bold text\n{\\HUGE }, {\\footnotesize }\n\nThe LaTeX system lays out your document according to a set of rules for spacing, margins, figure captions, cross-references, …\n\n\n\n\nPrinting press"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#latex-editors",
    "href": "slides/10a-latex-markdown.html#latex-editors",
    "title": "LaTeX and Markdown",
    "section": "LaTeX Editors",
    "text": "LaTeX Editors\nWhile a .tex file is just a text file, it can help to use a dedicated editor that will compile your document for you.\nSome options:\n\nRStudio (my default)\nOverleaf.com (real-time compilation, collaboration)\nTeXWorks\nLyX - What-you-see-is-what-you-get (WYSIWYG) LaTeX editor\n\nOf these, Lyx and Rstudio support integrating your code with your document using knitr/Sweave.\nLaTeX cheatsheet\nLearn LaTeX in 30 minutes"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#basic-latex",
    "href": "slides/10a-latex-markdown.html#basic-latex",
    "title": "LaTeX and Markdown",
    "section": "Basic LaTeX",
    "text": "Basic LaTeX\n\n\n\n\\documentclass{article}     % 1\n\\usepackage[utf8]{inputenc} % 2\n\n\\usepackage{natbib}         % 3 \n\\usepackage{graphicx}       % 4\n\n\\title{Demo}                % 5\n\\author{Susan VanderPlas}\n\\date{\\today}\n\n\\begin{document}            % 6\n\n\\maketitle                  % 7\n\n\\section{Introduction}      % 8\n\\citet{adams1995hitchhiker}\n\\section{Conclusion}\n\n\\bibliographystyle{plain}   % 9\n\\bibliography{refs}\n\\end{document}\nBasic LaTeX document\n\n\ntype of document (article)\nallow UTF-8 characters\nuse a bibliography\nallow pictures\nDocument header information\nActual document content\nCreate document title/header\nCreate introduction section (with a citation)\nCreate the bibliography\n\nOverleaf Gallery of possibilities\n\n\nLink to edit document"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#bibtex",
    "href": "slides/10a-latex-markdown.html#bibtex",
    "title": "LaTeX and Markdown",
    "section": "BibTeX",
    "text": "BibTeX\nOne of the most wonderful parts of LaTeX is BibTeX, which handles your citations for you.\n\nYou type your references in only once (in a markup style called bibtex)\nCitations in your paper are or or \nYou set the reference type at the top of the document (numeric, alphabetical, etc.)\nAt the end of the document you add a command for where the bibliography goes\n\nBibtex does all of the hard work of cross-linking your references with the bibliography, formatting, etc.\n\n\n\n\nThere are various options for (free!) citation managers - personally, I love Zotero and Mendeley because they also integrate with RStudio.\nOther tools: Evernote, Papers\nRecent blog with comparison of these and a few other reference managers.\nAll these programs help to keep track of papers and associated notes and will export BibTeX automatically.\nThey also come with browser addins that will easily save papers to your library as you surf."
  },
  {
    "objectID": "slides/10a-latex-markdown.html#typesetting-math",
    "href": "slides/10a-latex-markdown.html#typesetting-math",
    "title": "LaTeX and Markdown",
    "section": "Typesetting math",
    "text": "Typesetting math\n\n\nInline math: $x + 2$\nCentered math:\n$$ x+2 $$\n \n \n \nSystems of equations:\n\\begin {align} x &= a + b\\\\\ny &= c + d \\end{align}\n \nMath characters:\n\\alpha, \\beta, \\gamma, \\infty, \\rightarrow, \\int,\\frac{a}{b}\n\n\\(x + 2\\) is an inline equation.\nWe can also center equations within a paragraph, like this: \\[x + 2\\] The paragraph resumes after we’re done.\nSystems of equations:\n\\(\\begin{align} x &= a + b\\\\ y &= c + d\\end{align}\\)\n \nMath characters:\n\\[\\alpha,\\beta,\\gamma,\\infty,\\rightarrow,\\int,\\frac{a}{b}\\]\n\nCheatsheet for math mode"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#try-it-out",
    "href": "slides/10a-latex-markdown.html#try-it-out",
    "title": "LaTeX and Markdown",
    "section": "Try it out!",
    "text": "Try it out!\nMinimal LaTeX document:\n\\documentclass{article}\n\\begin{document}\nHello \\LaTeX!\n\\end{document}\n\nAdd an image\nAdd the quadratic formula and the PDF of a normal distribution to the document\nIn extremely large text, print LaTeX using the \\LaTeX command\nIn extremely small, italic text, print your name"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#pandoc",
    "href": "slides/10a-latex-markdown.html#pandoc",
    "title": "LaTeX and Markdown",
    "section": "Pandoc",
    "text": "Pandoc\n LaTeX only creates PDF files (and PostScript files, but nevermind those).\nEnter pandoc, which was supposed to be a “universal translator” of markup formats.\nMarkdown document -&gt;\n\nhtml\nepub\ndocx\nLaTeX\nother markdown flavors\n…\n\nWith pandoc, the goal is to transfer the content; the exact formatting is less of a priority. Thus, only a small set of formatting options are supported.\nYou can use the same BibTeX files in markdown with Pandoc!"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#try-it-out-1",
    "href": "slides/10a-latex-markdown.html#try-it-out-1",
    "title": "LaTeX and Markdown",
    "section": "Try it out!",
    "text": "Try it out!\n\n\nMinimal markdown document:\n---\ntitle: \"Demo\"\nauthor: \"Me\"\ndate: \"October 2020\"\noutput: \n  word_document: default\n  html_document: default\n  pdf_document: default\n---\n\n# Introduction\n\n# Conclusion\n\n# References\nmarkdown cheatsheet\n\n\nAdd an image from the internet\nAdd the quadratic formula and the probability density function of a normal distribution to the document\nMath mode works the same in markdown as in LaTeX (mostly)\nAdd a citation to the Hitchhiker’s Guide using this references file"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#latex-r",
    "href": "slides/10a-latex-markdown.html#latex-r",
    "title": "LaTeX and Markdown",
    "section": "LaTeX + R?",
    "text": "LaTeX + R?\n Sweave was the original document compilation system for combining LaTeX and R\n(created circa 2002)\n\nBasic structure was great\nCaching was terrible (so all code re-ran each time you changed formatting a bit)\n\nknitr: created in 2012 by Yihui Xie to be a better version of Sweave\n\nSame basic syntax\nbetter caching & dependency management\nAll Sweave features + some\nSupport for Python, Perl, C++, shell scripts"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#latex-r-1",
    "href": "slides/10a-latex-markdown.html#latex-r-1",
    "title": "LaTeX and Markdown",
    "section": "LaTeX + R?",
    "text": "LaTeX + R?\nknitr reference manual\n\n\nTo add R code to your .tex file,\n\nChange the file extension from .tex to .Rnw (Rnw = R no weave, a holdover from Sweave)\nAdd R code chunks\nCompile your document\n\n\nR code chunks in .Rnw documents\n&lt;&lt;chunk-name, chunk-options&gt;&gt;=\n\nR code here\n\n@"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#rmarkdown",
    "href": "slides/10a-latex-markdown.html#rmarkdown",
    "title": "LaTeX and Markdown",
    "section": "Markdown + R?",
    "text": "Markdown + R?\nYou’ve been using quarto for the entire semester, but it works essentially the same way as adding R to LaTeX:\n\nRmarkdown WorkflowQuarto is similar, but supports even more formats and allows you to use even more programming languages in code chunks."
  },
  {
    "objectID": "slides/10a-latex-markdown.html#code-chunk-options",
    "href": "slides/10a-latex-markdown.html#code-chunk-options",
    "title": "LaTeX and Markdown",
    "section": "Code Chunk Options",
    "text": "Code Chunk Options\nCommon chunk options:\n\neval = (T/F): whether the code is evaluated by R\ninclude = (T/F): should code or output from the code be included in the document?\necho = (T/F): should code be printed in the document, or just the output?\nfig.width, fig.height =: size of the saved image, in inches\nout.width =: width of the output image IN THE DOCUMENT\nfig.cap =: Set a figure caption\ncache = (T/F): Cache the chunk, so that it is only re-run if it changes?\n\nAll of these chunk options also work in rmarkdown"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#try-it-out-2",
    "href": "slides/10a-latex-markdown.html#try-it-out-2",
    "title": "LaTeX and Markdown",
    "section": "Try it out!",
    "text": "Try it out!\nTurn your .tex file into an .Rnw file and add some more stuff!\n\nAdd a histogram of 100 draws from a normal distribution\n\n\nCompute the mean of 15 draws from a binomial(10, .5) distribution and print it inline using \\Sexpr{}\n\n\nUse knitr::kable() to print out the first 6 rows of the cars dataframe."
  },
  {
    "objectID": "slides/10a-latex-markdown.html#table-upgrades",
    "href": "slides/10a-latex-markdown.html#table-upgrades",
    "title": "LaTeX and Markdown",
    "section": "Table Upgrades",
    "text": "Table Upgrades\nTable Packages\n\nkableExtra\nflextable\nhuxtable\ngt\nexpss\n\nOther packages\n\n(for HTML) papaja - use APA formatting throughout the whole html document"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#special-document-types",
    "href": "slides/10a-latex-markdown.html#special-document-types",
    "title": "LaTeX and Markdown",
    "section": "Special Document Types",
    "text": "Special Document Types\nBoth LaTeX and quarto/Rmarkdown make use of other libraries to expand the types of documents available.\n\n\n\nDocument Type\nLibrary\nCompiler\nEnd Result\n\n\n\n\n\nSlides\nBeamer\nLaTeX or Markdown + LaTeX\nPDF\n\n\n\n \nReveal.js\nMarkdown\nHTML\n\n\n\n \nIOSlides\nMarkdown\nHTML\n\n\n\n \nSlidy\nMarkdown\nHTML\n\n\n\n \nPowerPoint\nMarkdown\nPowerPoint\n\n\n\n \nXaringan\nMarkdown + JS\nHTML/markdown hybrid\n\n\n\nPoster\nBeamer\nLaTeX\nPDF\n\n\n\n \nPosterdown\nMarkdown\nHTML\n\n\n\n \nPagedown\nMarkdown\nHTML\n\n\n\n\nThese documents use the same basic markdown or LaTeX syntax, but render differently."
  }
]